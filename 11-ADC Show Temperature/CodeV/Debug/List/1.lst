
AVRASM ver. 2.1.30  U:\VRU\3992\AZ Riz\excersise\11- Analog-Digital (ADC)\Debug\List\1.asm Fri Jun 18 23:28:06 2021

U:\VRU\3992\AZ Riz\excersise\11- Analog-Digital (ADC)\Debug\List\1.asm(1088): warning: Register r5 already defined by the .DEF directive
U:\VRU\3992\AZ Riz\excersise\11- Analog-Digital (ADC)\Debug\List\1.asm(1089): warning: Register r4 already defined by the .DEF directive
U:\VRU\3992\AZ Riz\excersise\11- Analog-Digital (ADC)\Debug\List\1.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6554
000034 706d
000035 253d
000036 2064      	.DB  0x54,0x65,0x6D,0x70,0x3D,0x25,0x64,0x20
U:\VRU\3992\AZ Riz\excersise\11- Analog-Digital (ADC)\Debug\List\1.asm(1129): warning: .cseg .db misalignment - padding zero byte
000037 0000      	.DB  0x0
                 _0x2020003:
000038 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000039 0002      	.DW  0x02
00003a 0260      	.DW  __base_y_G101
00003b 0070      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00003c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003d 94f8      	CLI
00003e 27ee      	CLR  R30
00003f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000040 e0f1      	LDI  R31,1
000041 bffb      	OUT  GICR,R31
000042 bfeb      	OUT  GICR,R30
000043 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000044 e08d      	LDI  R24,(14-2)+1
000045 e0a2      	LDI  R26,2
000046 27bb      	CLR  R27
                 __CLEAR_REG:
000047 93ed      	ST   X+,R30
000048 958a      	DEC  R24
000049 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004b e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004d 93ed      	ST   X+,R30
00004e 9701      	SBIW R24,1
00004f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000050 e7e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000051 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000052 9185      	LPM  R24,Z+
000053 9195      	LPM  R25,Z+
000054 9700      	SBIW R24,0
000055 f061      	BREQ __GLOBAL_INI_END
000056 91a5      	LPM  R26,Z+
000057 91b5      	LPM  R27,Z+
000058 9005      	LPM  R0,Z+
000059 9015      	LPM  R1,Z+
00005a 01bf      	MOVW R22,R30
00005b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005c 9005      	LPM  R0,Z+
00005d 920d      	ST   X+,R0
00005e 9701      	SBIW R24,1
00005f f7e1      	BRNE __GLOBAL_INI_LOOP
000060 01fb      	MOVW R30,R22
000061 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000062 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000063 bfed      	OUT  SPL,R30
000064 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000065 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000066 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000067 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000068 940c 007b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega32.h>
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;//#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ; #define ADC_VREF_TYPE 0xc0
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0011 
                 ; 0000 0012 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0013 
                 ; 0000 0014 ADMUX=adc_input |( ADC_VREF_TYPE & 0xff);
00006a 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00006b 81e8      	LD   R30,Y
00006c 6ce0      	ORI  R30,LOW(0xC0)
00006d b9e7      	OUT  0x7,R30
                 ; 0000 0015 
                 ; 0000 0016 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0017 
                 ; 0000 0018 delay_us(10);
                +
00006e e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00006f 958a     +DEC R24
000070 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0019 
                 ; 0000 001A // Start the AD conversion
                 ; 0000 001B 
                 ; 0000 001C ADCSRA|=0x40;
000071 9a36      	SBI  0x6,6
                 ; 0000 001D 
                 ; 0000 001E // Wait for the AD conversion to complete
                 ; 0000 001F 
                 ; 0000 0020 while ((ADCSRA & 0x10)==0);
                 _0x3:
000072 9b34      	SBIS 0x6,4
000073 cffe      	RJMP _0x3
                 ; 0000 0021 
                 ; 0000 0022 ADCSRA|=0x10;
000074 9a34      	SBI  0x6,4
                 ; 0000 0023 
                 ; 0000 0024 return ADCW*2;
000075 b1e4      	IN   R30,0x4
000076 b1f5      	IN   R31,0x4+1
000077 0fee      	LSL  R30
000078 1fff      	ROL  R31
000079 940c 02df 	JMP  _0x2080001
                 ; 0000 0025 
                 ; 0000 0026 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0029 {
                 _main:
                 ; .FSTART _main
                 ; 0000 002A unsigned int a;
                 ; 0000 002B 
                 ; 0000 002C char s[15];
                 ; 0000 002D // Declare your local variables here
                 ; 0000 002E 
                 ; 0000 002F // Input/Output Ports initialization
                 ; 0000 0030 // Port A initialization
                 ; 0000 0031 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0032 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00007b 972f      	SBIW R28,15
                 ;	a -> R16,R17
                 ;	s -> Y+0
00007c e0e0      	LDI  R30,LOW(0)
00007d bbea      	OUT  0x1A,R30
                 ; 0000 0033 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0034 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00007e bbeb      	OUT  0x1B,R30
                 ; 0000 0035 
                 ; 0000 0036 // Port B initialization
                 ; 0000 0037 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0038 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00007f bbe7      	OUT  0x17,R30
                 ; 0000 0039 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003A PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000080 bbe8      	OUT  0x18,R30
                 ; 0000 003B 
                 ; 0000 003C // Port C initialization
                 ; 0000 003D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000081 bbe4      	OUT  0x14,R30
                 ; 0000 003F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0040 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000082 bbe5      	OUT  0x15,R30
                 ; 0000 0041 
                 ; 0000 0042 // Port D initialization
                 ; 0000 0043 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0044 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000083 bbe1      	OUT  0x11,R30
                 ; 0000 0045 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0046 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000084 bbe2      	OUT  0x12,R30
                 ; 0000 0047 
                 ; 0000 0048 ADMUX=ADC_VREF_TYPE;
000085 ece0      	LDI  R30,LOW(192)
000086 b9e7      	OUT  0x7,R30
                 ; 0000 0049 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
000087 e8e1      	LDI  R30,LOW(129)
000088 b9e6      	OUT  0x6,R30
                 ; 0000 004A SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000089 e0e0      	LDI  R30,LOW(0)
00008a bfe0      	OUT  0x30,R30
                 ; 0000 004B lcd_init(16);
00008b e1a0      	LDI  R26,LOW(16)
00008c 940e 02b4 	CALL _lcd_init
                 ; 0000 004C 
                 ; 0000 004D while (1)
                 _0x6:
                 ; 0000 004E       {
                 ; 0000 004F       // Place your code here
                 ; 0000 0050        a=read_adc(0);
00008e e0a0      	LDI  R26,LOW(0)
00008f dfda      	RCALL _read_adc
000090 018f      	MOVW R16,R30
                 ; 0000 0051        sprintf(s,"Temp=%d ",a/4);
000091 01fe      	MOVW R30,R28
000092 93fa      	ST   -Y,R31
000093 93ea      	ST   -Y,R30
                +
000094 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000095 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000096 93fa      	ST   -Y,R31
000097 93ea      	ST   -Y,R30
000098 01f8      	MOVW R30,R16
000099 940e 0345 	CALL __LSRW2
00009b 2766      	CLR  R22
00009c 2777      	CLR  R23
00009d 940e 0352 	CALL __PUTPARD1
00009f e084      	LDI  R24,4
0000a0 940e 0221 	CALL _sprintf
0000a2 9628      	ADIW R28,8
                 ; 0000 0052        lcd_gotoxy(0,0);
0000a3 e0e0      	LDI  R30,LOW(0)
0000a4 93ea      	ST   -Y,R30
0000a5 e0a0      	LDI  R26,LOW(0)
0000a6 940e 0275 	CALL _lcd_gotoxy
                 ; 0000 0053        lcd_puts(s);
0000a8 01de      	MOVW R26,R28
0000a9 940e 02a3 	CALL _lcd_puts
                 ; 0000 0054 
                 ; 0000 0055       }
0000ab cfe2      	RJMP _0x6
                 ; 0000 0056 }
                 _0x9:
0000ac cfff      	RJMP _0x9
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000ad 93ba      	ST   -Y,R27
0000ae 93aa      	ST   -Y,R26
0000af 931a      	ST   -Y,R17
0000b0 930a      	ST   -Y,R16
0000b1 81aa      	LDD  R26,Y+2
0000b2 81bb      	LDD  R27,Y+2+1
0000b3 9612      	ADIW R26,2
0000b4 940e 034a 	CALL __GETW1P
0000b6 9730      	SBIW R30,0
0000b7 f159      	BREQ _0x2000010
0000b8 81aa      	LDD  R26,Y+2
0000b9 81bb      	LDD  R27,Y+2+1
0000ba 9614      	ADIW R26,4
0000bb 940e 034a 	CALL __GETW1P
0000bd 018f      	MOVW R16,R30
0000be 9730      	SBIW R30,0
0000bf f061      	BREQ _0x2000012
                +
0000c0 3002     +CPI R16 , LOW ( 2 )
0000c1 e0e0     +LDI R30 , HIGH ( 2 )
0000c2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000c3 f098      	BRLO _0x2000013
0000c4 01f8      	MOVW R30,R16
0000c5 9731      	SBIW R30,1
0000c6 018f      	MOVW R16,R30
                +
0000c7 81aa     +LDD R26 , Y + 2
0000c8 81bb     +LDD R27 , Y + 2 + 1
0000c9 9614     +ADIW R26 , 4
0000ca 93ed     +ST X + , R30
0000cb 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0000cc 81aa      	LDD  R26,Y+2
0000cd 81bb      	LDD  R27,Y+2+1
0000ce 9612      	ADIW R26,2
0000cf 91ed      	LD   R30,X+
0000d0 91fd      	LD   R31,X+
0000d1 9631      	ADIW R30,1
0000d2 93fe      	ST   -X,R31
0000d3 93ee      	ST   -X,R30
0000d4 9731      	SBIW R30,1
0000d5 81ac      	LDD  R26,Y+4
0000d6 83a0      	STD  Z+0,R26
                 _0x2000013:
0000d7 81aa      	LDD  R26,Y+2
0000d8 81bb      	LDD  R27,Y+2+1
0000d9 940e 034a 	CALL __GETW1P
0000db 23ff      	TST  R31
0000dc f02a      	BRMI _0x2000014
0000dd 91ed      	LD   R30,X+
0000de 91fd      	LD   R31,X+
0000df 9631      	ADIW R30,1
0000e0 93fe      	ST   -X,R31
0000e1 93ee      	ST   -X,R30
                 _0x2000014:
0000e2 c006      	RJMP _0x2000015
                 _0x2000010:
0000e3 81aa      	LDD  R26,Y+2
0000e4 81bb      	LDD  R27,Y+2+1
0000e5 efef      	LDI  R30,LOW(65535)
0000e6 efff      	LDI  R31,HIGH(65535)
0000e7 93ed      	ST   X+,R30
0000e8 93fc      	ST   X,R31
                 _0x2000015:
0000e9 8119      	LDD  R17,Y+1
0000ea 8108      	LDD  R16,Y+0
0000eb 9625      	ADIW R28,5
0000ec 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0000ed 93ba      	ST   -Y,R27
0000ee 93aa      	ST   -Y,R26
0000ef 9726      	SBIW R28,6
0000f0 940e 0357 	CALL __SAVELOCR6
0000f2 e010      	LDI  R17,0
0000f3 85ac      	LDD  R26,Y+12
0000f4 85bd      	LDD  R27,Y+12+1
0000f5 e0e0      	LDI  R30,LOW(0)
0000f6 e0f0      	LDI  R31,HIGH(0)
0000f7 93ed      	ST   X+,R30
0000f8 93fc      	ST   X,R31
                 _0x2000016:
0000f9 89ea      	LDD  R30,Y+18
0000fa 89fb      	LDD  R31,Y+18+1
0000fb 9631      	ADIW R30,1
0000fc 8bea      	STD  Y+18,R30
0000fd 8bfb      	STD  Y+18+1,R31
0000fe 9731      	SBIW R30,1
0000ff 91e4      	LPM  R30,Z
000100 2f2e      	MOV  R18,R30
000101 30e0      	CPI  R30,0
000102 f409      	BRNE PC+2
000103 c115      	RJMP _0x2000018
000104 2fe1      	MOV  R30,R17
000105 30e0      	CPI  R30,0
000106 f439      	BRNE _0x200001C
000107 3225      	CPI  R18,37
000108 f411      	BRNE _0x200001D
000109 e011      	LDI  R17,LOW(1)
00010a c002      	RJMP _0x200001E
                 _0x200001D:
00010b 940e 02fa 	CALL SUBOPT_0x0
                 _0x200001E:
00010d c10a      	RJMP _0x200001B
                 _0x200001C:
00010e 30e1      	CPI  R30,LOW(0x1)
00010f f4a9      	BRNE _0x200001F
000110 3225      	CPI  R18,37
000111 f419      	BRNE _0x2000020
000112 940e 02fa 	CALL SUBOPT_0x0
000114 c102      	RJMP _0x20000CC
                 _0x2000020:
000115 e012      	LDI  R17,LOW(2)
000116 e040      	LDI  R20,LOW(0)
000117 e000      	LDI  R16,LOW(0)
000118 322d      	CPI  R18,45
000119 f411      	BRNE _0x2000021
00011a e001      	LDI  R16,LOW(1)
00011b c0fc      	RJMP _0x200001B
                 _0x2000021:
00011c 322b      	CPI  R18,43
00011d f411      	BRNE _0x2000022
00011e e24b      	LDI  R20,LOW(43)
00011f c0f8      	RJMP _0x200001B
                 _0x2000022:
000120 3220      	CPI  R18,32
000121 f411      	BRNE _0x2000023
000122 e240      	LDI  R20,LOW(32)
000123 c0f4      	RJMP _0x200001B
                 _0x2000023:
000124 c002      	RJMP _0x2000024
                 _0x200001F:
000125 30e2      	CPI  R30,LOW(0x2)
000126 f439      	BRNE _0x2000025
                 _0x2000024:
000127 e050      	LDI  R21,LOW(0)
000128 e013      	LDI  R17,LOW(3)
000129 3320      	CPI  R18,48
00012a f411      	BRNE _0x2000026
00012b 6800      	ORI  R16,LOW(128)
00012c c0eb      	RJMP _0x200001B
                 _0x2000026:
00012d c003      	RJMP _0x2000027
                 _0x2000025:
00012e 30e3      	CPI  R30,LOW(0x3)
00012f f009      	BREQ PC+2
000130 c0e7      	RJMP _0x200001B
                 _0x2000027:
000131 3320      	CPI  R18,48
000132 f010      	BRLO _0x200002A
000133 332a      	CPI  R18,58
000134 f008      	BRLO _0x200002B
                 _0x200002A:
000135 c007      	RJMP _0x2000029
                 _0x200002B:
000136 e0aa      	LDI  R26,LOW(10)
000137 9f5a      	MUL  R21,R26
000138 2d50      	MOV  R21,R0
000139 2fe2      	MOV  R30,R18
00013a 53e0      	SUBI R30,LOW(48)
00013b 0f5e      	ADD  R21,R30
00013c c0db      	RJMP _0x200001B
                 _0x2000029:
00013d 2fe2      	MOV  R30,R18
00013e 36e3      	CPI  R30,LOW(0x63)
00013f f449      	BRNE _0x200002F
000140 940e 0301 	CALL SUBOPT_0x1
000142 89e8      	LDD  R30,Y+16
000143 89f9      	LDD  R31,Y+16+1
000144 81a4      	LDD  R26,Z+4
000145 93aa      	ST   -Y,R26
000146 940e 0307 	CALL SUBOPT_0x2
000148 c0ce      	RJMP _0x2000030
                 _0x200002F:
000149 37e3      	CPI  R30,LOW(0x73)
00014a f441      	BRNE _0x2000032
00014b 940e 0301 	CALL SUBOPT_0x1
00014d 940e 030d 	CALL SUBOPT_0x3
00014f 940e 02e1 	CALL _strlen
000151 2f1e      	MOV  R17,R30
000152 c00a      	RJMP _0x2000033
                 _0x2000032:
000153 37e0      	CPI  R30,LOW(0x70)
000154 f461      	BRNE _0x2000035
000155 940e 0301 	CALL SUBOPT_0x1
000157 940e 030d 	CALL SUBOPT_0x3
000159 940e 02ed 	CALL _strlenf
00015b 2f1e      	MOV  R17,R30
00015c 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00015d 6002      	ORI  R16,LOW(2)
00015e 770f      	ANDI R16,LOW(127)
00015f e030      	LDI  R19,LOW(0)
000160 c034      	RJMP _0x2000036
                 _0x2000035:
000161 36e4      	CPI  R30,LOW(0x64)
000162 f011      	BREQ _0x2000039
000163 36e9      	CPI  R30,LOW(0x69)
000164 f411      	BRNE _0x200003A
                 _0x2000039:
000165 6004      	ORI  R16,LOW(4)
000166 c002      	RJMP _0x200003B
                 _0x200003A:
000167 37e5      	CPI  R30,LOW(0x75)
000168 f431      	BRNE _0x200003C
                 _0x200003B:
000169 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00016a e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00016b 83ee      	STD  Y+6,R30
00016c 83ff      	STD  Y+6+1,R31
00016d e015      	LDI  R17,LOW(5)
00016e c00c      	RJMP _0x200003D
                 _0x200003C:
00016f 35e8      	CPI  R30,LOW(0x58)
000170 f411      	BRNE _0x200003F
000171 6008      	ORI  R16,LOW(8)
000172 c003      	RJMP _0x2000040
                 _0x200003F:
000173 37e8      	CPI  R30,LOW(0x78)
000174 f009      	BREQ PC+2
000175 c0a1      	RJMP _0x2000071
                 _0x2000040:
000176 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000177 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000178 83ee      	STD  Y+6,R30
000179 83ff      	STD  Y+6+1,R31
00017a e014      	LDI  R17,LOW(4)
                 _0x200003D:
00017b ff02      	SBRS R16,2
00017c c014      	RJMP _0x2000042
00017d 940e 0301 	CALL SUBOPT_0x1
00017f 940e 0317 	CALL SUBOPT_0x4
000181 85ab      	LDD  R26,Y+11
000182 23aa      	TST  R26
000183 f43a      	BRPL _0x2000043
000184 85ea      	LDD  R30,Y+10
000185 85fb      	LDD  R31,Y+10+1
000186 940e 0341 	CALL __ANEGW1
000188 87ea      	STD  Y+10,R30
000189 87fb      	STD  Y+10+1,R31
00018a e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00018b 3040      	CPI  R20,0
00018c f011      	BREQ _0x2000044
00018d 5f1f      	SUBI R17,-LOW(1)
00018e c001      	RJMP _0x2000045
                 _0x2000044:
00018f 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000190 c004      	RJMP _0x2000046
                 _0x2000042:
000191 940e 0301 	CALL SUBOPT_0x1
000193 940e 0317 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
000195 fd00      	SBRC R16,0
000196 c011      	RJMP _0x2000047
                 _0x2000048:
000197 1715      	CP   R17,R21
000198 f478      	BRSH _0x200004A
000199 ff07      	SBRS R16,7
00019a c008      	RJMP _0x200004B
00019b ff02      	SBRS R16,2
00019c c004      	RJMP _0x200004C
00019d 7f0b      	ANDI R16,LOW(251)
00019e 2f24      	MOV  R18,R20
00019f 5011      	SUBI R17,LOW(1)
0001a0 c001      	RJMP _0x200004D
                 _0x200004C:
0001a1 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001a2 c001      	RJMP _0x200004E
                 _0x200004B:
0001a3 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001a4 940e 02fa 	CALL SUBOPT_0x0
0001a6 5051      	SUBI R21,LOW(1)
0001a7 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001a8 2f31      	MOV  R19,R17
0001a9 ff01      	SBRS R16,1
0001aa c017      	RJMP _0x200004F
                 _0x2000050:
0001ab 3030      	CPI  R19,0
0001ac f0a1      	BREQ _0x2000052
0001ad ff03      	SBRS R16,3
0001ae c006      	RJMP _0x2000053
0001af 81ee      	LDD  R30,Y+6
0001b0 81ff      	LDD  R31,Y+6+1
0001b1 9125      	LPM  R18,Z+
0001b2 83ee      	STD  Y+6,R30
0001b3 83ff      	STD  Y+6+1,R31
0001b4 c005      	RJMP _0x2000054
                 _0x2000053:
0001b5 81ae      	LDD  R26,Y+6
0001b6 81bf      	LDD  R27,Y+6+1
0001b7 912d      	LD   R18,X+
0001b8 83ae      	STD  Y+6,R26
0001b9 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001ba 940e 02fa 	CALL SUBOPT_0x0
0001bc 3050      	CPI  R21,0
0001bd f009      	BREQ _0x2000055
0001be 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001bf 5031      	SUBI R19,LOW(1)
0001c0 cfea      	RJMP _0x2000050
                 _0x2000052:
0001c1 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001c2 e320      	LDI  R18,LOW(48)
0001c3 81ee      	LDD  R30,Y+6
0001c4 81ff      	LDD  R31,Y+6+1
0001c5 940e 034e 	CALL __GETW1PF
0001c7 87e8      	STD  Y+8,R30
0001c8 87f9      	STD  Y+8+1,R31
0001c9 81ee      	LDD  R30,Y+6
0001ca 81ff      	LDD  R31,Y+6+1
0001cb 9632      	ADIW R30,2
0001cc 83ee      	STD  Y+6,R30
0001cd 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001ce 85e8      	LDD  R30,Y+8
0001cf 85f9      	LDD  R31,Y+8+1
0001d0 85aa      	LDD  R26,Y+10
0001d1 85bb      	LDD  R27,Y+10+1
0001d2 17ae      	CP   R26,R30
0001d3 07bf      	CPC  R27,R31
0001d4 f050      	BRLO _0x200005C
0001d5 5f2f      	SUBI R18,-LOW(1)
0001d6 85a8      	LDD  R26,Y+8
0001d7 85b9      	LDD  R27,Y+8+1
0001d8 85ea      	LDD  R30,Y+10
0001d9 85fb      	LDD  R31,Y+10+1
0001da 1bea      	SUB  R30,R26
0001db 0bfb      	SBC  R31,R27
0001dc 87ea      	STD  Y+10,R30
0001dd 87fb      	STD  Y+10+1,R31
0001de cfef      	RJMP _0x200005A
                 _0x200005C:
0001df 332a      	CPI  R18,58
0001e0 f028      	BRLO _0x200005D
0001e1 ff03      	SBRS R16,3
0001e2 c002      	RJMP _0x200005E
0001e3 5f29      	SUBI R18,-LOW(7)
0001e4 c001      	RJMP _0x200005F
                 _0x200005E:
0001e5 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0001e6 fd04      	SBRC R16,4
0001e7 c01a      	RJMP _0x2000061
0001e8 3321      	CPI  R18,49
0001e9 f420      	BRSH _0x2000063
0001ea 85a8      	LDD  R26,Y+8
0001eb 85b9      	LDD  R27,Y+8+1
0001ec 9711      	SBIW R26,1
0001ed f409      	BRNE _0x2000062
                 _0x2000063:
0001ee c009      	RJMP _0x20000CD
                 _0x2000062:
0001ef 1753      	CP   R21,R19
0001f0 f010      	BRLO _0x2000067
0001f1 ff00      	SBRS R16,0
0001f2 c001      	RJMP _0x2000068
                 _0x2000067:
0001f3 c013      	RJMP _0x2000066
                 _0x2000068:
0001f4 e220      	LDI  R18,LOW(32)
0001f5 ff07      	SBRS R16,7
0001f6 c00b      	RJMP _0x2000069
0001f7 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0001f8 6100      	ORI  R16,LOW(16)
0001f9 ff02      	SBRS R16,2
0001fa c007      	RJMP _0x200006A
0001fb 7f0b      	ANDI R16,LOW(251)
0001fc 934a      	ST   -Y,R20
0001fd 940e 0307 	CALL SUBOPT_0x2
0001ff 3050      	CPI  R21,0
000200 f009      	BREQ _0x200006B
000201 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000202 940e 02fa 	CALL SUBOPT_0x0
000204 3050      	CPI  R21,0
000205 f009      	BREQ _0x200006C
000206 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000207 5031      	SUBI R19,LOW(1)
000208 85a8      	LDD  R26,Y+8
000209 85b9      	LDD  R27,Y+8+1
00020a 9712      	SBIW R26,2
00020b f008      	BRLO _0x2000059
00020c cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00020d ff00      	SBRS R16,0
00020e c008      	RJMP _0x200006D
                 _0x200006E:
00020f 3050      	CPI  R21,0
000210 f031      	BREQ _0x2000070
000211 5051      	SUBI R21,LOW(1)
000212 e2e0      	LDI  R30,LOW(32)
000213 93ea      	ST   -Y,R30
000214 940e 0307 	CALL SUBOPT_0x2
000216 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000217 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000218 cee0      	RJMP _0x2000016
                 _0x2000018:
000219 85ac      	LDD  R26,Y+12
00021a 85bd      	LDD  R27,Y+12+1
00021b 940e 034a 	CALL __GETW1P
00021d 940e 035e 	CALL __LOADLOCR6
00021f 9664      	ADIW R28,20
000220 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000221 92ff      	PUSH R15
000222 2ef8      	MOV  R15,R24
000223 9726      	SBIW R28,6
000224 940e 0359 	CALL __SAVELOCR4
000226 940e 031f 	CALL SUBOPT_0x5
000228 9730      	SBIW R30,0
000229 f419      	BRNE _0x2000072
00022a efef      	LDI  R30,LOW(65535)
00022b efff      	LDI  R31,HIGH(65535)
00022c c023      	RJMP _0x2080002
                 _0x2000072:
00022d 01de      	MOVW R26,R28
00022e 9616      	ADIW R26,6
00022f 940e 033d 	CALL __ADDW2R15
000231 018d      	MOVW R16,R26
000232 940e 031f 	CALL SUBOPT_0x5
000234 83ee      	STD  Y+6,R30
000235 83ff      	STD  Y+6+1,R31
000236 e0e0      	LDI  R30,LOW(0)
000237 87e8      	STD  Y+8,R30
000238 87e9      	STD  Y+8+1,R30
000239 01de      	MOVW R26,R28
00023a 961a      	ADIW R26,10
00023b 940e 033d 	CALL __ADDW2R15
00023d 940e 034a 	CALL __GETW1P
00023f 93fa      	ST   -Y,R31
000240 93ea      	ST   -Y,R30
000241 931a      	ST   -Y,R17
000242 930a      	ST   -Y,R16
000243 eaed      	LDI  R30,LOW(_put_buff_G100)
000244 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000245 93fa      	ST   -Y,R31
000246 93ea      	ST   -Y,R30
000247 01de      	MOVW R26,R28
000248 961a      	ADIW R26,10
000249 dea3      	RCALL __print_G100
00024a 019f      	MOVW R18,R30
00024b 81ae      	LDD  R26,Y+6
00024c 81bf      	LDD  R27,Y+6+1
00024d e0e0      	LDI  R30,LOW(0)
00024e 93ec      	ST   X,R30
00024f 01f9      	MOVW R30,R18
                 _0x2080002:
000250 940e 0360 	CALL __LOADLOCR4
000252 962a      	ADIW R28,10
000253 90ff      	POP  R15
000254 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000255 93aa      	ST   -Y,R26
000256 b3e5      	IN   R30,0x15
000257 70ef      	ANDI R30,LOW(0xF)
000258 2fae      	MOV  R26,R30
000259 81e8      	LD   R30,Y
00025a 7fe0      	ANDI R30,LOW(0xF0)
00025b 2bea      	OR   R30,R26
00025c bbe5      	OUT  0x15,R30
                +
00025d e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00025e 958a     +DEC R24
00025f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000260 9aaa      	SBI  0x15,2
                +
000261 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000262 958a     +DEC R24
000263 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000264 98aa      	CBI  0x15,2
                +
000265 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000266 958a     +DEC R24
000267 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000268 c076      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000269 93aa      	ST   -Y,R26
00026a 81a8      	LD   R26,Y
00026b dfe9      	RCALL __lcd_write_nibble_G101
00026c 81e8          ld    r30,y
00026d 95e2          swap  r30
00026e 83e8          st    y,r30
00026f 81a8      	LD   R26,Y
000270 dfe4      	RCALL __lcd_write_nibble_G101
                +
000271 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000272 958a     +DEC R24
000273 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000274 c06a      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000275 93aa      	ST   -Y,R26
000276 81e8      	LD   R30,Y
000277 e0f0      	LDI  R31,0
000278 5ae0      	SUBI R30,LOW(-__base_y_G101)
000279 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00027a 81e0      	LD   R30,Z
00027b 81a9      	LDD  R26,Y+1
00027c 0fae      	ADD  R26,R30
00027d dfeb      	RCALL __lcd_write_data
00027e 8059      	LDD  R5,Y+1
00027f 8048      	LDD  R4,Y+0
000280 9622      	ADIW R28,2
000281 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000282 e0a2      	LDI  R26,LOW(2)
000283 940e 0326 	CALL SUBOPT_0x6
000285 e0ac      	LDI  R26,LOW(12)
000286 dfe2      	RCALL __lcd_write_data
000287 e0a1      	LDI  R26,LOW(1)
000288 940e 0326 	CALL SUBOPT_0x6
00028a e0e0      	LDI  R30,LOW(0)
00028b 2e4e      	MOV  R4,R30
00028c 2e5e      	MOV  R5,R30
00028d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00028e 93aa      	ST   -Y,R26
00028f 81a8      	LD   R26,Y
000290 30aa      	CPI  R26,LOW(0xA)
000291 f011      	BREQ _0x2020005
000292 1457      	CP   R5,R7
000293 f048      	BRLO _0x2020004
                 _0x2020005:
000294 e0e0      	LDI  R30,LOW(0)
000295 93ea      	ST   -Y,R30
000296 9443      	INC  R4
000297 2da4      	MOV  R26,R4
000298 dfdc      	RCALL _lcd_gotoxy
000299 81a8      	LD   R26,Y
00029a 30aa      	CPI  R26,LOW(0xA)
00029b f409      	BRNE _0x2020007
00029c c042      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
00029d 9453      	INC  R5
00029e 9aa8      	SBI  0x15,0
00029f 81a8      	LD   R26,Y
0002a0 dfc8      	RCALL __lcd_write_data
0002a1 98a8      	CBI  0x15,0
0002a2 c03c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002a3 93ba      	ST   -Y,R27
0002a4 93aa      	ST   -Y,R26
0002a5 931a      	ST   -Y,R17
                 _0x2020008:
0002a6 81a9      	LDD  R26,Y+1
0002a7 81ba      	LDD  R27,Y+1+1
0002a8 91ed      	LD   R30,X+
0002a9 83a9      	STD  Y+1,R26
0002aa 83ba      	STD  Y+1+1,R27
0002ab 2f1e      	MOV  R17,R30
0002ac 30e0      	CPI  R30,0
0002ad f019      	BREQ _0x202000A
0002ae 2fa1      	MOV  R26,R17
0002af dfde      	RCALL _lcd_putchar
0002b0 cff5      	RJMP _0x2020008
                 _0x202000A:
0002b1 8118      	LDD  R17,Y+0
0002b2 9623      	ADIW R28,3
0002b3 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002b4 93aa      	ST   -Y,R26
0002b5 b3e4      	IN   R30,0x14
0002b6 6fe0      	ORI  R30,LOW(0xF0)
0002b7 bbe4      	OUT  0x14,R30
0002b8 9aa2      	SBI  0x14,2
0002b9 9aa0      	SBI  0x14,0
0002ba 9aa1      	SBI  0x14,1
0002bb 98aa      	CBI  0x15,2
0002bc 98a8      	CBI  0x15,0
0002bd 98a9      	CBI  0x15,1
0002be 8078      	LDD  R7,Y+0
0002bf 81e8      	LD   R30,Y
0002c0 58e0      	SUBI R30,-LOW(128)
                +
0002c1 93e0 0262+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002c3 81e8      	LD   R30,Y
0002c4 54e0      	SUBI R30,-LOW(192)
                +
0002c5 93e0 0263+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002c7 e1a4      	LDI  R26,LOW(20)
0002c8 e0b0      	LDI  R27,0
0002c9 940e 0333 	CALL _delay_ms
0002cb 940e 032c 	CALL SUBOPT_0x7
0002cd 940e 032c 	CALL SUBOPT_0x7
0002cf 940e 032c 	CALL SUBOPT_0x7
0002d1 e2a0      	LDI  R26,LOW(32)
0002d2 df82      	RCALL __lcd_write_nibble_G101
                +
0002d3 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0002d4 958a     +DEC R24
0002d5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0002d6 e2a8      	LDI  R26,LOW(40)
0002d7 df91      	RCALL __lcd_write_data
0002d8 e0a4      	LDI  R26,LOW(4)
0002d9 df8f      	RCALL __lcd_write_data
0002da e8a5      	LDI  R26,LOW(133)
0002db df8d      	RCALL __lcd_write_data
0002dc e0a6      	LDI  R26,LOW(6)
0002dd df8b      	RCALL __lcd_write_data
0002de dfa3      	RCALL _lcd_clear
                 _0x2080001:
0002df 9621      	ADIW R28,1
0002e0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002e1 93ba      	ST   -Y,R27
0002e2 93aa      	ST   -Y,R26
0002e3 91a9          ld   r26,y+
0002e4 91b9          ld   r27,y+
0002e5 27ee          clr  r30
0002e6 27ff          clr  r31
                 strlen0:
0002e7 916d          ld   r22,x+
0002e8 2366          tst  r22
0002e9 f011          breq strlen1
0002ea 9631          adiw r30,1
0002eb cffb          rjmp strlen0
                 strlen1:
0002ec 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002ed 93ba      	ST   -Y,R27
0002ee 93aa      	ST   -Y,R26
0002ef 27aa          clr  r26
0002f0 27bb          clr  r27
0002f1 91e9          ld   r30,y+
0002f2 91f9          ld   r31,y+
                 strlenf0:
0002f3 9005      	lpm  r0,z+
0002f4 2000          tst  r0
0002f5 f011          breq strlenf1
0002f6 9611          adiw r26,1
0002f7 cffb          rjmp strlenf0
                 strlenf1:
0002f8 01fd          movw r30,r26
0002f9 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G101:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
0002fa 932a      	ST   -Y,R18
0002fb 85ad      	LDD  R26,Y+13
0002fc 85be      	LDD  R27,Y+13+1
0002fd 85ef      	LDD  R30,Y+15
0002fe 89f8      	LDD  R31,Y+15+1
0002ff 9509      	ICALL
000300 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000301 89e8      	LDD  R30,Y+16
000302 89f9      	LDD  R31,Y+16+1
000303 9734      	SBIW R30,4
000304 8be8      	STD  Y+16,R30
000305 8bf9      	STD  Y+16+1,R31
000306 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000307 85ad      	LDD  R26,Y+13
000308 85be      	LDD  R27,Y+13+1
000309 85ef      	LDD  R30,Y+15
00030a 89f8      	LDD  R31,Y+15+1
00030b 9509      	ICALL
00030c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00030d 89a8      	LDD  R26,Y+16
00030e 89b9      	LDD  R27,Y+16+1
00030f 9614      	ADIW R26,4
000310 940e 034a 	CALL __GETW1P
000312 83ee      	STD  Y+6,R30
000313 83ff      	STD  Y+6+1,R31
000314 81ae      	LDD  R26,Y+6
000315 81bf      	LDD  R27,Y+6+1
000316 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000317 89a8      	LDD  R26,Y+16
000318 89b9      	LDD  R27,Y+16+1
000319 9614      	ADIW R26,4
00031a 940e 034a 	CALL __GETW1P
00031c 87ea      	STD  Y+10,R30
00031d 87fb      	STD  Y+10+1,R31
00031e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00031f 01de      	MOVW R26,R28
000320 961c      	ADIW R26,12
000321 940e 033d 	CALL __ADDW2R15
000323 940e 034a 	CALL __GETW1P
000325 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000326 940e 0269 	CALL __lcd_write_data
000328 e0a3      	LDI  R26,LOW(3)
000329 e0b0      	LDI  R27,0
00032a 940c 0333 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00032c e3a0      	LDI  R26,LOW(48)
00032d 940e 0255 	CALL __lcd_write_nibble_G101
                +
00032f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000330 958a     +DEC R24
000331 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000332 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000333 9610      	adiw r26,0
000334 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000335 ef8a     +LDI R24 , LOW ( 0xFA )
000336 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000337 9701     +SBIW R24 , 1
000338 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000339 95a8      	wdr
00033a 9711      	sbiw r26,1
00033b f7c9      	brne __delay_ms0
                 __delay_ms1:
00033c 9508      	ret
                 
                 __ADDW2R15:
00033d 2400      	CLR  R0
00033e 0daf      	ADD  R26,R15
00033f 1db0      	ADC  R27,R0
000340 9508      	RET
                 
                 __ANEGW1:
000341 95f1      	NEG  R31
000342 95e1      	NEG  R30
000343 40f0      	SBCI R31,0
000344 9508      	RET
                 
                 __LSRW2:
000345 95f6      	LSR  R31
000346 95e7      	ROR  R30
000347 95f6      	LSR  R31
000348 95e7      	ROR  R30
000349 9508      	RET
                 
                 __GETW1P:
00034a 91ed      	LD   R30,X+
00034b 91fc      	LD   R31,X
00034c 9711      	SBIW R26,1
00034d 9508      	RET
                 
                 __GETW1PF:
00034e 9005      	LPM  R0,Z+
00034f 91f4      	LPM  R31,Z
000350 2de0      	MOV  R30,R0
000351 9508      	RET
                 
                 __PUTPARD1:
000352 937a      	ST   -Y,R23
000353 936a      	ST   -Y,R22
000354 93fa      	ST   -Y,R31
000355 93ea      	ST   -Y,R30
000356 9508      	RET
                 
                 __SAVELOCR6:
000357 935a      	ST   -Y,R21
                 __SAVELOCR5:
000358 934a      	ST   -Y,R20
                 __SAVELOCR4:
000359 933a      	ST   -Y,R19
                 __SAVELOCR3:
00035a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00035b 931a      	ST   -Y,R17
00035c 930a      	ST   -Y,R16
00035d 9508      	RET
                 
                 __LOADLOCR6:
00035e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00035f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000360 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000361 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000362 8119      	LDD  R17,Y+1
000363 8108      	LD   R16,Y
000364 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  36 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:  25 r25:   3 r26:  99 r27:  36 r28:  17 r29:   1 r30: 170 r31:  60 
x  :  23 y  : 168 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  24 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  52 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  24 ld    :  26 ldd   :  77 ldi   :  85 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   2 mov   :  17 movw  :  18 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  20 pop   :   1 push  :   1 rcall :  15 ret   :  25 
reti  :   0 rjmp  :  60 rol   :   1 ror   :   2 sbc   :   1 sbci  :   2 
sbi   :   7 sbic  :   0 sbis  :   1 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  60 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 57 out of 116 (49.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006ca   1700     38   1738   32768   5.3%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
