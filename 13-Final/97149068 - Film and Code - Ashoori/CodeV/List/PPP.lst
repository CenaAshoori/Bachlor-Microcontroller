
AVRASM ver. 2.1.30  U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm Sat Jul 03 20:09:10 2021

U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1088): warning: Register r5 already defined by the .DEF directive
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1089): warning: Register r4 already defined by the .DEF directive
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1090): warning: Register r7 already defined by the .DEF directive
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1091): warning: Register r6 already defined by the .DEF directive
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1092): warning: Register r9 already defined by the .DEF directive
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _row=R5
                 	.DEF _col=R4
                 	.DEF _Temp=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0094 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 00c4 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000      	.DB  0x0,0x0
                 
                 _0x0:
00002b 2023
00002c 4e45
00002d 4554
00002e 2052      	.DB  0x23,0x20,0x45,0x4E,0x54,0x45,0x52,0x20
00002f 4150
000030 5353
000031 2000
000032 202a      	.DB  0x50,0x41,0x53,0x53,0x0,0x20,0x2A,0x20
000033 4843
000034 4e41
000035 4547
000036 5020      	.DB  0x43,0x48,0x41,0x4E,0x47,0x45,0x20,0x50
000037 5341
000038 0053
000039 504f
00003a 4e45      	.DB  0x41,0x53,0x53,0x0,0x4F,0x50,0x45,0x4E
00003b 4300
00003c 4f4c
00003d 4553
00003e 5300      	.DB  0x0,0x43,0x4C,0x4F,0x53,0x45,0x0,0x53
00003f 524f
000040 5952
000041 5200
000042 5345      	.DB  0x4F,0x52,0x52,0x59,0x0,0x52,0x45,0x53
000043 5445
000044 4500
000045 544e
000046 5245      	.DB  0x45,0x54,0x0,0x45,0x4E,0x54,0x45,0x52
000047 4f20
000048 444c
000049 5020
00004a 5341      	.DB  0x20,0x4F,0x4C,0x44,0x20,0x50,0x41,0x53
00004b 0053
00004c 4e45
00004d 4554
00004e 2052      	.DB  0x53,0x0,0x45,0x4E,0x54,0x45,0x52,0x20
00004f 454e
000050 2057
000051 4150
000052 5353      	.DB  0x4E,0x45,0x57,0x20,0x50,0x41,0x53,0x53
000053 4f00
000054 004b
000055 7525
000056 5000      	.DB  0x0,0x4F,0x4B,0x0,0x25,0x75,0x0,0x50
000057 6572
000058 7365
000059 4920
00005a 746e      	.DB  0x72,0x65,0x65,0x73,0x20,0x49,0x6E,0x74
00005b 7265
00005c 7075
00005d 2074
00005e 6f54      	.DB  0x65,0x72,0x75,0x70,0x74,0x20,0x54,0x6F
00005f 7420
000060 7079
000061 2065
000062 6170      	.DB  0x20,0x74,0x79,0x70,0x65,0x20,0x70,0x61
000063 7373
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1143): warning: .cseg .db misalignment - padding zero byte
000064 0000      	.DB  0x73,0x73,0x0
                 _0x2000003:
000065 c080      	.DB  0x80,0xC0
                 _0x2020000:
000066 4e2d
000067 4e41
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1147): warning: .cseg .db misalignment - padding zero byte
000068 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x20A0060:
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1149): warning: .cseg .db misalignment - padding zero byte
000069 0001      	.DB  0x1
                 _0x20A0000:
00006a 4e2d
00006b 4e41
00006c 4900
00006d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
U:\VRU\3992\AZ Riz\+Final - Open door - interupt\All\Code - Video\CodeV\List\PPP.asm(1152): warning: .cseg .db misalignment - padding zero byte
00006e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00006f 0002      	.DW  0x02
000070 0004      	.DW  0x04
000071 0054      	.DW  __REG_VARS*2
                 
000072 000d      	.DW  0x0D
000073 0160      	.DW  _0x5
000074 0056      	.DW  _0x0*2
                 
000075 000f      	.DW  0x0F
000076 016d      	.DW  _0x5+13
000077 0063      	.DW  _0x0*2+13
                 
000078 0005      	.DW  0x05
000079 017c      	.DW  _0x5+28
00007a 0072      	.DW  _0x0*2+28
                 
00007b 0006      	.DW  0x06
00007c 0181      	.DW  _0x5+33
00007d 0077      	.DW  _0x0*2+33
                 
00007e 0006      	.DW  0x06
00007f 0187      	.DW  _0x5+39
000080 007d      	.DW  _0x0*2+39
                 
000081 0006      	.DW  0x06
000082 018d      	.DW  _0x5+45
000083 0083      	.DW  _0x0*2+45
                 
000084 000f      	.DW  0x0F
000085 0193      	.DW  _0x16
000086 0089      	.DW  _0x0*2+51
                 
000087 000f      	.DW  0x0F
000088 01a2      	.DW  _0x16+15
000089 0098      	.DW  _0x0*2+66
                 
00008a 0003      	.DW  0x03
00008b 01b1      	.DW  _0x16+30
00008c 00a7      	.DW  _0x0*2+81
                 
00008d 0002      	.DW  0x02
00008e 01be      	.DW  __base_y_G100
00008f 00ca      	.DW  _0x2000003*2
                 
000090 0001      	.DW  0x01
000091 01c2      	.DW  __seed_G105
000092 00d2      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
000093 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000094 94f8      	CLI
000095 27ee      	CLR  R30
000096 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000097 e0f1      	LDI  R31,1
000098 bffb      	OUT  GICR,R31
000099 bfeb      	OUT  GICR,R30
00009a bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00009b e1f8      	LDI  R31,0x18
00009c bdf1      	OUT  WDTCR,R31
00009d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00009e e08d      	LDI  R24,(14-2)+1
00009f e0a2      	LDI  R26,2
0000a0 27bb      	CLR  R27
                 __CLEAR_REG:
0000a1 93ed      	ST   X+,R30
0000a2 958a      	DEC  R24
0000a3 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a4 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a5 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a6 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000a7 93ed      	ST   X+,R30
0000a8 9701      	SBIW R24,1
0000a9 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000aa edee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ab e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000ac 9185      	LPM  R24,Z+
0000ad 9195      	LPM  R25,Z+
0000ae 9700      	SBIW R24,0
0000af f061      	BREQ __GLOBAL_INI_END
0000b0 91a5      	LPM  R26,Z+
0000b1 91b5      	LPM  R27,Z+
0000b2 9005      	LPM  R0,Z+
0000b3 9015      	LPM  R1,Z+
0000b4 01bf      	MOVW R22,R30
0000b5 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b6 9005      	LPM  R0,Z+
0000b7 920d      	ST   X+,R0
0000b8 9701      	SBIW R24,1
0000b9 f7e1      	BRNE __GLOBAL_INI_LOOP
0000ba 01fb      	MOVW R30,R22
0000bb cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000bc e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bd bfed      	OUT  SPL,R30
0000be e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000bf bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c0 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c1 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c2 940c 022c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <lcd.h>
                 ;#include <stdio.h>
                 ;
                 ;#asm
                    .equ __lcd_port=0x1B ;PORTA
                 ; 0000 0008 #endasm
                 ;
                 ;#define KEYPAD_PORT PORTC
                 ;#define KEYPAD_PIN PINC
                 ;#define KEYPAD_DDR DDRC
                 ;#define OUTPUT_PORT PORTD
                 ;#define OUTPUT_DDR DDRD
                 ;#define RESET_PIN PINB.0
                 ;
                 ;
                 ;
                 ;eeprom  int pass ,j;
                 ;unsigned char key[10];
                 ;signed char row=0 ,col=0;
                 ;unsigned char keypad();
                 ;void change_pass();
                 ;int enter_pass();
                 ;char Temp;
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000c4 920a      	ST   -Y,R0
0000c5 921a      	ST   -Y,R1
0000c6 92fa      	ST   -Y,R15
0000c7 936a      	ST   -Y,R22
0000c8 937a      	ST   -Y,R23
0000c9 938a      	ST   -Y,R24
0000ca 939a      	ST   -Y,R25
0000cb 93aa      	ST   -Y,R26
0000cc 93ba      	ST   -Y,R27
0000cd 93ea      	ST   -Y,R30
0000ce 93fa      	ST   -Y,R31
0000cf b7ef      	IN   R30,SREG
0000d0 93ea      	ST   -Y,R30
                 ; 0000 001D // Place your code here
                 ; 0000 001E         PORTD.6 = 0;
0000d1 9896      	CBI  0x12,6
                 ; 0000 001F         #asm("cli");
0000d2 94f8      	cli
                 ; 0000 0020         delay_ms(400);
0000d3 e9a0      	LDI  R26,LOW(400)
0000d4 e0b1      	LDI  R27,HIGH(400)
0000d5 940e 051f 	CALL SUBOPT_0x0
                 ; 0000 0021         lcd_clear();
                 ; 0000 0022 
                 ; 0000 0023        lcd_puts("# ENTER PASS");
                +
0000d7 e6a0     +LDI R26 , LOW ( _0x5 + ( 0 ) )
0000d8 e0b1     +LDI R27 , HIGH ( _0x5 + ( 0 ) )
                 	__POINTW2MN _0x5,0
0000d9 940e 02fc 	CALL _lcd_puts
                 ; 0000 0024        lcd_gotoxy(0,1);
0000db e0e0      	LDI  R30,LOW(0)
0000dc 93ea      	ST   -Y,R30
0000dd e0a1      	LDI  R26,LOW(1)
0000de 940e 02bf 	CALL _lcd_gotoxy
                 ; 0000 0025        lcd_puts(" * CHANGE PASS");
                +
0000e0 e6ad     +LDI R26 , LOW ( _0x5 + ( 13 ) )
0000e1 e0b1     +LDI R27 , HIGH ( _0x5 + ( 13 ) )
                 	__POINTW2MN _0x5,13
0000e2 940e 02fc 	CALL _lcd_puts
                 ; 0000 0026        lcd_putchar(j);
0000e4 e0a2      	LDI  R26,LOW(_j)
0000e5 e0b0      	LDI  R27,HIGH(_j)
0000e6 940e 0591 	CALL __EEPROMRDB
0000e8 2fae      	MOV  R26,R30
0000e9 940e 02e2 	CALL _lcd_putchar
                 ; 0000 0027        delay_ms(200);
0000eb eca8      	LDI  R26,LOW(200)
0000ec e0b0      	LDI  R27,0
0000ed 940e 0568 	CALL _delay_ms
                 ; 0000 0028        Temp=keypad();
0000ef d09d      	RCALL _keypad
0000f0 2e7e      	MOV  R7,R30
                 ; 0000 0029 
                 ; 0000 002A 
                 ; 0000 002B        if(Temp=='#' && j>0)
0000f1 e2e3      	LDI  R30,LOW(35)
0000f2 15e7      	CP   R30,R7
0000f3 f429      	BRNE _0x7
0000f4 940e 0523 	CALL SUBOPT_0x1
0000f6 940e 05b6 	CALL __CPW01
0000f8 f00c      	BRLT _0x8
                 _0x7:
0000f9 c024      	RJMP _0x6
                 _0x8:
                 ; 0000 002C        {
                 ; 0000 002D        if(enter_pass()== pass)
0000fa 940e 0528 	CALL SUBOPT_0x2
0000fc f499      	BRNE _0x9
                 ; 0000 002E         {
                 ; 0000 002F         lcd_clear();
0000fd 940e 02cf 	CALL _lcd_clear
                 ; 0000 0030          lcd_puts("OPEN");
                +
0000ff e7ac     +LDI R26 , LOW ( _0x5 + ( 28 ) )
000100 e0b1     +LDI R27 , HIGH ( _0x5 + ( 28 ) )
                 	__POINTW2MN _0x5,28
000101 940e 02fc 	CALL _lcd_puts
                 ; 0000 0031          OUTPUT_PORT =128;
000103 e8e0      	LDI  R30,LOW(128)
000104 bbe2      	OUT  0x12,R30
                 ; 0000 0032          delay_ms(2000);
000105 eda0      	LDI  R26,LOW(2000)
000106 e0b7      	LDI  R27,HIGH(2000)
000107 940e 051f 	CALL SUBOPT_0x0
                 ; 0000 0033          lcd_clear();
                 ; 0000 0034          OUTPUT_PORT =0;
000109 e0e0      	LDI  R30,LOW(0)
00010a bbe2      	OUT  0x12,R30
                 ; 0000 0035          j=3;
00010b e0a2      	LDI  R26,LOW(_j)
00010c e0b0      	LDI  R27,HIGH(_j)
00010d e0e3      	LDI  R30,LOW(3)
00010e e0f0      	LDI  R31,HIGH(3)
00010f c00b      	RJMP _0x48
                 ; 0000 0036           }
                 ; 0000 0037        else
                 _0x9:
                 ; 0000 0038         {
                 ; 0000 0039         lcd_clear();
000110 940e 02cf 	CALL _lcd_clear
                 ; 0000 003A          lcd_puts("CLOSE");
                +
000112 e8a1     +LDI R26 , LOW ( _0x5 + ( 33 ) )
000113 e0b1     +LDI R27 , HIGH ( _0x5 + ( 33 ) )
                 	__POINTW2MN _0x5,33
000114 940e 0532 	CALL SUBOPT_0x3
                 ; 0000 003B           delay_ms(500);
000116 940e 051f 	CALL SUBOPT_0x0
                 ; 0000 003C            lcd_clear();
                 ; 0000 003D            j--;
000118 940e 0523 	CALL SUBOPT_0x1
00011a 9731      	SBIW R30,1
                 _0x48:
00011b 940e 059d 	CALL __EEPROMWRW
                 ; 0000 003E          }
                 ; 0000 003F        }
                 ; 0000 0040 
                 ; 0000 0041        else if(Temp=='*' && j>0)
00011d c00a      	RJMP _0xB
                 _0x6:
00011e e2ea      	LDI  R30,LOW(42)
00011f 15e7      	CP   R30,R7
000120 f429      	BRNE _0xD
000121 940e 0523 	CALL SUBOPT_0x1
000123 940e 05b6 	CALL __CPW01
000125 f00c      	BRLT _0xE
                 _0xD:
000126 c001      	RJMP _0xC
                 _0xE:
                 ; 0000 0042        change_pass();
000127 d039      	RCALL _change_pass
                 ; 0000 0043 
                 ; 0000 0044        if(j<=0)
                 _0xC:
                 _0xB:
000128 940e 0523 	CALL SUBOPT_0x1
00012a 940e 05b6 	CALL __CPW01
00012c f104      	BRLT _0xF
                 ; 0000 0045        {
                 ; 0000 0046        lcd_clear();
00012d 940e 02cf 	CALL _lcd_clear
                 ; 0000 0047        lcd_puts("SORRY");
                +
00012f e8a7     +LDI R26 , LOW ( _0x5 + ( 39 ) )
000130 e0b1     +LDI R27 , HIGH ( _0x5 + ( 39 ) )
                 	__POINTW2MN _0x5,39
000131 940e 02fc 	CALL _lcd_puts
                 ; 0000 0048        while(1)
                 _0x10:
                 ; 0000 0049         {
                 ; 0000 004A         if(RESET_PIN==0)
000133 99b0      	SBIC 0x16,0
000134 c017      	RJMP _0x13
                 ; 0000 004B          {
                 ; 0000 004C           lcd_clear();
000135 940e 02cf 	CALL _lcd_clear
                 ; 0000 004D           lcd_puts("RESET");
                +
000137 e8ad     +LDI R26 , LOW ( _0x5 + ( 45 ) )
000138 e0b1     +LDI R27 , HIGH ( _0x5 + ( 45 ) )
                 	__POINTW2MN _0x5,45
000139 940e 02fc 	CALL _lcd_puts
                 ; 0000 004E           pass=1234;
00013b e0a0      	LDI  R26,LOW(_pass)
00013c e0b0      	LDI  R27,HIGH(_pass)
00013d ede2      	LDI  R30,LOW(1234)
00013e e0f4      	LDI  R31,HIGH(1234)
00013f 940e 059d 	CALL __EEPROMWRW
                 ; 0000 004F           j=3;
000141 e0a2      	LDI  R26,LOW(_j)
000142 e0b0      	LDI  R27,HIGH(_j)
000143 e0e3      	LDI  R30,LOW(3)
000144 e0f0      	LDI  R31,HIGH(3)
000145 940e 059d 	CALL __EEPROMWRW
                 ; 0000 0050           delay_ms(1000);
000147 eea8      	LDI  R26,LOW(1000)
000148 e0b3      	LDI  R27,HIGH(1000)
000149 940e 051f 	CALL SUBOPT_0x0
                 ; 0000 0051           lcd_clear();
                 ; 0000 0052           break;
00014b c001      	RJMP _0x12
                 ; 0000 0053            }
                 ; 0000 0054           }
                 _0x13:
00014c cfe6      	RJMP _0x10
                 _0x12:
                 ; 0000 0055          }
                 ; 0000 0056        lcd_clear();
                 _0xF:
00014d 940e 02cf 	CALL _lcd_clear
                 ; 0000 0057        KEYPAD_PORT = 0xf0;
00014f efe0      	LDI  R30,LOW(240)
000150 bbe5      	OUT  0x15,R30
                 ; 0000 0058        PORTD.6 = 1;
000151 9a96      	SBI  0x12,6
                 ; 0000 0059        #asm("sei");
000152 9478      	sei
                 ; 0000 005A }
000153 91e9      	LD   R30,Y+
000154 bfef      	OUT  SREG,R30
000155 91f9      	LD   R31,Y+
000156 91e9      	LD   R30,Y+
000157 91b9      	LD   R27,Y+
000158 91a9      	LD   R26,Y+
000159 9199      	LD   R25,Y+
00015a 9189      	LD   R24,Y+
00015b 9179      	LD   R23,Y+
00015c 9169      	LD   R22,Y+
00015d 90f9      	LD   R15,Y+
00015e 9019      	LD   R1,Y+
00015f 9009      	LD   R0,Y+
000160 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x5:
000160           	.BYTE 0x33
                 ;void change_pass()
                 ; 0000 005C {
                 
                 	.CSEG
                 _change_pass:
                 ; .FSTART _change_pass
                 ; 0000 005D  lcd_clear();
000161 940e 02cf 	CALL _lcd_clear
                 ; 0000 005E  lcd_puts("ENTER OLD PASS");
                +
000163 e9a3     +LDI R26 , LOW ( _0x16 + ( 0 ) )
000164 e0b1     +LDI R27 , HIGH ( _0x16 + ( 0 ) )
                 	__POINTW2MN _0x16,0
000165 940e 0532 	CALL SUBOPT_0x3
                 ; 0000 005F  delay_ms(500);
000167 940e 0568 	CALL _delay_ms
                 ; 0000 0060 
                 ; 0000 0061  while(j!=0)
                 _0x17:
000169 940e 0523 	CALL SUBOPT_0x1
00016b 9730      	SBIW R30,0
00016c f0f9      	BREQ _0x19
                 ; 0000 0062   {
                 ; 0000 0063    if(enter_pass()==pass)
00016d 940e 0528 	CALL SUBOPT_0x2
00016f f4b1      	BRNE _0x1A
                 ; 0000 0064     {
                 ; 0000 0065      lcd_clear();
000170 940e 02cf 	CALL _lcd_clear
                 ; 0000 0066       lcd_puts("ENTER NEW PASS");
                +
000172 eaa2     +LDI R26 , LOW ( _0x16 + ( 15 ) )
000173 e0b1     +LDI R27 , HIGH ( _0x16 + ( 15 ) )
                 	__POINTW2MN _0x16,15
000174 940e 0532 	CALL SUBOPT_0x3
                 ; 0000 0067        delay_ms(500);
000176 940e 0568 	CALL _delay_ms
                 ; 0000 0068      pass = enter_pass();
000178 d04d      	RCALL _enter_pass
000179 e0a0      	LDI  R26,LOW(_pass)
00017a e0b0      	LDI  R27,HIGH(_pass)
00017b 940e 059d 	CALL __EEPROMWRW
                 ; 0000 0069      lcd_clear();
00017d 940e 02cf 	CALL _lcd_clear
                 ; 0000 006A       lcd_puts("OK");
                +
00017f eba1     +LDI R26 , LOW ( _0x16 + ( 30 ) )
000180 e0b1     +LDI R27 , HIGH ( _0x16 + ( 30 ) )
                 	__POINTW2MN _0x16,30
000181 940e 0532 	CALL SUBOPT_0x3
                 ; 0000 006B        delay_ms(500);
000183 940e 0568 	CALL _delay_ms
                 ; 0000 006C         return;
000185 9508      	RET
                 ; 0000 006D        }
                 ; 0000 006E    else j--;
                 _0x1A:
000186 940e 0523 	CALL SUBOPT_0x1
000188 9731      	SBIW R30,1
000189 940e 059d 	CALL __EEPROMWRW
                 ; 0000 006F     }
00018b cfdd      	RJMP _0x17
                 _0x19:
                 ; 0000 0070 }
00018c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x16:
000193           	.BYTE 0x21
                 ;
                 ;
                 ;char keypad()
                 ; 0000 0074 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0075     while(1){
                 _0x1C:
                 ; 0000 0076         PORTC = 0b00010000;
00018d e1e0      	LDI  R30,LOW(16)
00018e bbe5      	OUT  0x15,R30
                 ; 0000 0077         if (PINC.0)return '*';
00018f 9b98      	SBIS 0x13,0
000190 c002      	RJMP _0x1F
000191 e2ea      	LDI  R30,LOW(42)
000192 9508      	RET
                 ; 0000 0078         if (PINC.1)return '2';
                 _0x1F:
000193 9b99      	SBIS 0x13,1
000194 c002      	RJMP _0x20
000195 e3e2      	LDI  R30,LOW(50)
000196 9508      	RET
                 ; 0000 0079         if (PINC.2)return '3';
                 _0x20:
000197 9b9a      	SBIS 0x13,2
000198 c002      	RJMP _0x21
000199 e3e3      	LDI  R30,LOW(51)
00019a 9508      	RET
                 ; 0000 007A 
                 ; 0000 007B         PORTC = 0b00100000;
                 _0x21:
00019b e2e0      	LDI  R30,LOW(32)
00019c bbe5      	OUT  0x15,R30
                 ; 0000 007C         if (PINC.0)return '1';
00019d 9b98      	SBIS 0x13,0
00019e c002      	RJMP _0x22
00019f e3e1      	LDI  R30,LOW(49)
0001a0 9508      	RET
                 ; 0000 007D         if (PINC.1)return '5';
                 _0x22:
0001a1 9b99      	SBIS 0x13,1
0001a2 c002      	RJMP _0x23
0001a3 e3e5      	LDI  R30,LOW(53)
0001a4 9508      	RET
                 ; 0000 007E         if (PINC.2)return '6';
                 _0x23:
0001a5 9b9a      	SBIS 0x13,2
0001a6 c002      	RJMP _0x24
0001a7 e3e6      	LDI  R30,LOW(54)
0001a8 9508      	RET
                 ; 0000 007F 
                 ; 0000 0080         PORTC = 0b01000000;
                 _0x24:
0001a9 e4e0      	LDI  R30,LOW(64)
0001aa bbe5      	OUT  0x15,R30
                 ; 0000 0081         if (PINC.0)return '4';
0001ab 9b98      	SBIS 0x13,0
0001ac c002      	RJMP _0x25
0001ad e3e4      	LDI  R30,LOW(52)
0001ae 9508      	RET
                 ; 0000 0082         if (PINC.1)return '8';
                 _0x25:
0001af 9b99      	SBIS 0x13,1
0001b0 c002      	RJMP _0x26
0001b1 e3e8      	LDI  R30,LOW(56)
0001b2 9508      	RET
                 ; 0000 0083         if (PINC.2)return '9';
                 _0x26:
0001b3 9b9a      	SBIS 0x13,2
0001b4 c002      	RJMP _0x27
0001b5 e3e9      	LDI  R30,LOW(57)
0001b6 9508      	RET
                 ; 0000 0084 
                 ; 0000 0085         PORTC = 0b10000000;
                 _0x27:
0001b7 e8e0      	LDI  R30,LOW(128)
0001b8 bbe5      	OUT  0x15,R30
                 ; 0000 0086         if (PINC.0)return '7';
0001b9 9b98      	SBIS 0x13,0
0001ba c002      	RJMP _0x28
0001bb e3e7      	LDI  R30,LOW(55)
0001bc 9508      	RET
                 ; 0000 0087         if (PINC.1)return '0';
                 _0x28:
0001bd 9b99      	SBIS 0x13,1
0001be c002      	RJMP _0x29
0001bf e3e0      	LDI  R30,LOW(48)
0001c0 9508      	RET
                 ; 0000 0088         if (PINC.2)return '#';
                 _0x29:
0001c1 9b9a      	SBIS 0x13,2
0001c2 c002      	RJMP _0x2A
0001c3 e2e3      	LDI  R30,LOW(35)
0001c4 9508      	RET
                 ; 0000 0089        }
                 _0x2A:
0001c5 cfc7      	RJMP _0x1C
                 ; 0000 008A }
                 ; .FEND
                 ;
                 ;int enter_pass()
                 ; 0000 008D {
                 _enter_pass:
                 ; .FSTART _enter_pass
                 ; 0000 008E  int n=0 ,i=0 ,num;
                 ; 0000 008F  lcd_clear();
0001c6 940e 05ba 	CALL __SAVELOCR6
                 ;	n -> R16,R17
                 ;	i -> R18,R19
                 ;	num -> R20,R21
                +
0001c8 e000     +LDI R16 , LOW ( 0 )
0001c9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001ca e020     +LDI R18 , LOW ( 0 )
0001cb e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0001cc 940e 02cf 	CALL _lcd_clear
                 ; 0000 0090 
                 ; 0000 0091  while(i<=8) {
                 _0x2B:
                +
0001ce 3029     +CPI R18 , LOW ( 9 )
0001cf e0e0     +LDI R30 , HIGH ( 9 )
0001d0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,9
0001d1 f00c      	BRLT PC+2
0001d2 c055      	RJMP _0x2D
                 ; 0000 0092 
                 ; 0000 0093    key[i]=keypad();
0001d3 01f9      	MOVW R30,R18
0001d4 54ec      	SUBI R30,LOW(-_key)
0001d5 4ffe      	SBCI R31,HIGH(-_key)
0001d6 93ff      	PUSH R31
0001d7 93ef      	PUSH R30
0001d8 dfb4      	RCALL _keypad
0001d9 91af      	POP  R26
0001da 91bf      	POP  R27
0001db 93ec      	ST   X,R30
                 ; 0000 0094 
                 ; 0000 0095     if(key[i]=='#' && i>3)
0001dc 940e 0537 	CALL SUBOPT_0x4
0001de 32a3      	CPI  R26,LOW(0x23)
0001df f421      	BRNE _0x2F
                +
0001e0 3024     +CPI R18 , LOW ( 4 )
0001e1 e0e0     +LDI R30 , HIGH ( 4 )
0001e2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
0001e3 f40c      	BRGE _0x30
                 _0x2F:
0001e4 c017      	RJMP _0x2E
                 _0x30:
                 ; 0000 0096       {
                 ; 0000 0097        sscanf(key,"%u",&num);
0001e5 ebe4      	LDI  R30,LOW(_key)
0001e6 e0f1      	LDI  R31,HIGH(_key)
0001e7 93fa      	ST   -Y,R31
0001e8 93ea      	ST   -Y,R30
                +
0001e9 eaea     +LDI R30 , LOW ( 2 * _0x0 + ( 84 ) )
0001ea e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 84 ) )
                 	__POINTW1FN _0x0,84
0001eb 93fa      	ST   -Y,R31
0001ec 93ea      	ST   -Y,R30
0001ed b7ed      	IN   R30,SPL
0001ee b7fe      	IN   R31,SPH
0001ef 9731      	SBIW R30,1
0001f0 940e 0586 	CALL __PUTPARD1L
0001f2 935f      	PUSH R21
0001f3 934f      	PUSH R20
0001f4 e084      	LDI  R24,4
0001f5 940e 04d1 	CALL _sscanf
0001f7 9628      	ADIW R28,8
0001f8 914f      	POP  R20
0001f9 915f      	POP  R21
                 ; 0000 0098        return num;
0001fa 01fa      	MOVW R30,R20
0001fb c02c      	RJMP _0x20C0006
                 ; 0000 0099         }
                 ; 0000 009A       else if (key[i] =='*')
                 _0x2E:
0001fc 940e 0537 	CALL SUBOPT_0x4
0001fe 32aa      	CPI  R26,LOW(0x2A)
0001ff f4a1      	BRNE _0x32
                 ; 0000 009B         {
                 ; 0000 009C            i--;
                +
000200 5021     +SUBI R18 , LOW ( 1 )
000201 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 009D            lcd_clear();
000202 940e 02cf 	CALL _lcd_clear
                 ; 0000 009E            for(n=0;n<i;n++)lcd_putchar(key[n]);
                +
000204 e000     +LDI R16 , LOW ( 0 )
000205 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x34:
                +
000206 1702     +CP R16 , R18
000207 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000208 f454      	BRGE _0x35
000209 eba4      	LDI  R26,LOW(_key)
00020a e0b1      	LDI  R27,HIGH(_key)
00020b 0fa0      	ADD  R26,R16
00020c 1fb1      	ADC  R27,R17
00020d 91ac      	LD   R26,X
00020e 940e 02e2 	CALL _lcd_putchar
                +
000210 5f0f     +SUBI R16 , LOW ( - 1 )
000211 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000212 cff3      	RJMP _0x34
                 _0x35:
                 ; 0000 009F }
                 ; 0000 00A0         else if (i<8 && key[i]!='#')
000213 c00f      	RJMP _0x36
                 _0x32:
                +
000214 3028     +CPI R18 , LOW ( 8 )
000215 e0e0     +LDI R30 , HIGH ( 8 )
000216 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000217 f424      	BRGE _0x38
000218 940e 0537 	CALL SUBOPT_0x4
00021a 32a3      	CPI  R26,LOW(0x23)
00021b f409      	BRNE _0x39
                 _0x38:
00021c c006      	RJMP _0x37
                 _0x39:
                 ; 0000 00A1           {
                 ; 0000 00A2            lcd_putchar(key[i]);
00021d 940e 0537 	CALL SUBOPT_0x4
00021f 940e 02e2 	CALL _lcd_putchar
                 ; 0000 00A3            i++;
                +
000221 5f2f     +SUBI R18 , LOW ( - 1 )
000222 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 00A4             }
                 ; 0000 00A5     delay_ms(250);
                 _0x37:
                 _0x36:
000223 efaa      	LDI  R26,LOW(250)
000224 e0b0      	LDI  R27,0
000225 940e 0568 	CALL _delay_ms
                 ; 0000 00A6    }
000227 cfa6      	RJMP _0x2B
                 _0x2D:
                 ; 0000 00A7 }
                 _0x20C0006:
000228 940e 05c1 	CALL __LOADLOCR6
00022a 9626      	ADIW R28,6
00022b 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00AD {
                 _main:
                 ; .FSTART _main
                 ; 0000 00AE // Declare your local variables here
                 ; 0000 00AF 
                 ; 0000 00B0 // Input/Output Ports initialization
                 ; 0000 00B1 // Port A initialization
                 ; 0000 00B2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B3 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00022c e0e0      	LDI  R30,LOW(0)
00022d bbea      	OUT  0x1A,R30
                 ; 0000 00B4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B5 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00022e bbeb      	OUT  0x1B,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // Port B initialization
                 ; 0000 00B8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B9 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00022f bbe7      	OUT  0x17,R30
                 ; 0000 00BA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00BB PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000230 bbe8      	OUT  0x18,R30
                 ; 0000 00BC 
                 ; 0000 00BD // Port C initialization
                 ; 0000 00BE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00BF DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000231 efe0      	LDI  R30,LOW(240)
000232 bbe4      	OUT  0x14,R30
                 ; 0000 00C0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00C1 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000233 e0e0      	LDI  R30,LOW(0)
000234 bbe5      	OUT  0x15,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Port D initialization
                 ; 0000 00C4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00C5 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000235 bbe1      	OUT  0x11,R30
                 ; 0000 00C6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00C7 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000236 bbe2      	OUT  0x12,R30
                 ; 0000 00C8 
                 ; 0000 00C9 // Timer/Counter 0 initialization
                 ; 0000 00CA // Clock source: System Clock
                 ; 0000 00CB // Clock value: Timer 0 Stopped
                 ; 0000 00CC // Mode: Normal top=0xFF
                 ; 0000 00CD // OC0 output: Disconnected
                 ; 0000 00CE TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000237 bfe3      	OUT  0x33,R30
                 ; 0000 00CF TCNT0=0x00;
000238 bfe2      	OUT  0x32,R30
                 ; 0000 00D0 OCR0=0x00;
000239 bfec      	OUT  0x3C,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Timer/Counter 1 initialization
                 ; 0000 00D3 // Clock source: System Clock
                 ; 0000 00D4 // Clock value: Timer1 Stopped
                 ; 0000 00D5 // Mode: Normal top=0xFFFF
                 ; 0000 00D6 // OC1A output: Disconnected
                 ; 0000 00D7 // OC1B output: Disconnected
                 ; 0000 00D8 // Noise Canceler: Off
                 ; 0000 00D9 // Input Capture on Falling Edge
                 ; 0000 00DA // Timer1 Overflow Interrupt: Off
                 ; 0000 00DB // Input Capture Interrupt: Off
                 ; 0000 00DC // Compare A Match Interrupt: Off
                 ; 0000 00DD // Compare B Match Interrupt: Off
                 ; 0000 00DE TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00023a bdef      	OUT  0x2F,R30
                 ; 0000 00DF TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00023b bdee      	OUT  0x2E,R30
                 ; 0000 00E0 TCNT1H=0x00;
00023c bded      	OUT  0x2D,R30
                 ; 0000 00E1 TCNT1L=0x00;
00023d bdec      	OUT  0x2C,R30
                 ; 0000 00E2 ICR1H=0x00;
00023e bde7      	OUT  0x27,R30
                 ; 0000 00E3 ICR1L=0x00;
00023f bde6      	OUT  0x26,R30
                 ; 0000 00E4 OCR1AH=0x00;
000240 bdeb      	OUT  0x2B,R30
                 ; 0000 00E5 OCR1AL=0x00;
000241 bdea      	OUT  0x2A,R30
                 ; 0000 00E6 OCR1BH=0x00;
000242 bde9      	OUT  0x29,R30
                 ; 0000 00E7 OCR1BL=0x00;
000243 bde8      	OUT  0x28,R30
                 ; 0000 00E8 
                 ; 0000 00E9 // Timer/Counter 2 initialization
                 ; 0000 00EA // Clock source: System Clock
                 ; 0000 00EB // Clock value: Timer2 Stopped
                 ; 0000 00EC // Mode: Normal top=0xFF
                 ; 0000 00ED // OC2 output: Disconnected
                 ; 0000 00EE ASSR=0<<AS2;
000244 bde2      	OUT  0x22,R30
                 ; 0000 00EF TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000245 bde5      	OUT  0x25,R30
                 ; 0000 00F0 TCNT2=0x00;
000246 bde4      	OUT  0x24,R30
                 ; 0000 00F1 OCR2=0x00;
000247 bde3      	OUT  0x23,R30
                 ; 0000 00F2 
                 ; 0000 00F3 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00F4 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000248 bfe9      	OUT  0x39,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // External Interrupt(s) initialization
                 ; 0000 00F7 // INT0: Off
                 ; 0000 00F8 // INT1: Off
                 ; 0000 00F9 // INT2: On
                 ; 0000 00FA // INT2 Mode: Rising Edge
                 ; 0000 00FB GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
000249 b7eb      	IN   R30,0x3B
00024a 62e0      	ORI  R30,0x20
00024b bfeb      	OUT  0x3B,R30
                 ; 0000 00FC MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00024c e0e0      	LDI  R30,LOW(0)
00024d bfe5      	OUT  0x35,R30
                 ; 0000 00FD MCUCSR=(1<<ISC2);
00024e e4e0      	LDI  R30,LOW(64)
00024f bfe4      	OUT  0x34,R30
                 ; 0000 00FE GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
000250 e2e0      	LDI  R30,LOW(32)
000251 bfea      	OUT  0x3A,R30
                 ; 0000 00FF 
                 ; 0000 0100 // USART initialization
                 ; 0000 0101 // USART disabled
                 ; 0000 0102 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000252 e0e0      	LDI  R30,LOW(0)
000253 b9ea      	OUT  0xA,R30
                 ; 0000 0103 
                 ; 0000 0104 // Analog Comparator initialization
                 ; 0000 0105 // Analog Comparator: Off
                 ; 0000 0106 // The Analog Comparator's positive input is
                 ; 0000 0107 // connected to the AIN0 pin
                 ; 0000 0108 // The Analog Comparator's negative input is
                 ; 0000 0109 // connected to the AIN1 pin
                 ; 0000 010A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000254 e8e0      	LDI  R30,LOW(128)
000255 b9e8      	OUT  0x8,R30
                 ; 0000 010B SFIOR=(0<<ACME);
000256 e0e0      	LDI  R30,LOW(0)
000257 bfe0      	OUT  0x30,R30
                 ; 0000 010C 
                 ; 0000 010D // ADC initialization
                 ; 0000 010E // ADC disabled
                 ; 0000 010F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000258 b9e6      	OUT  0x6,R30
                 ; 0000 0110 
                 ; 0000 0111 // SPI initialization
                 ; 0000 0112 // SPI disabled
                 ; 0000 0113 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000259 b9ed      	OUT  0xD,R30
                 ; 0000 0114 
                 ; 0000 0115 // TWI initialization
                 ; 0000 0116 // TWI disabled
                 ; 0000 0117 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00025a bfe6      	OUT  0x36,R30
                 ; 0000 0118 
                 ; 0000 0119 // Global enable interrupts
                 ; 0000 011A #asm("sei")  ;
00025b 9478      	sei
                 ; 0000 011B 
                 ; 0000 011C 
                 ; 0000 011D     lcd_init(16);
00025c e1a0      	LDI  R26,LOW(16)
00025d 940e 032f 	CALL _lcd_init
                 ; 0000 011E     OUTPUT_DDR=0b11000000;
00025f ece0      	LDI  R30,LOW(192)
000260 bbe1      	OUT  0x11,R30
                 ; 0000 011F     DDRB.0 =0;
000261 98b8      	CBI  0x17,0
                 ; 0000 0120     PORTB.0 =1;
000262 9ac0      	SBI  0x18,0
                 ; 0000 0121     KEYPAD_PORT = 0xf0;
000263 efe0      	LDI  R30,LOW(240)
000264 bbe5      	OUT  0x15,R30
                 ; 0000 0122     PORTD.6 = 1;
000265 9a96      	SBI  0x12,6
                 ; 0000 0123     while (1)
                 _0x40:
                 ; 0000 0124     {
                 ; 0000 0125 
                 ; 0000 0126 
                 ; 0000 0127     // Place your code here
                 ; 0000 0128       if (col==16) {
000266 e1e0      	LDI  R30,LOW(16)
000267 15e4      	CP   R30,R4
000268 f439      	BRNE _0x43
                 ; 0000 0129         col =0;
000269 2444      	CLR  R4
                 ; 0000 012A         row = row == 0 ? 1 : 0 ;
00026a 2055      	TST  R5
00026b f411      	BRNE _0x44
00026c e0e1      	LDI  R30,LOW(1)
00026d c001      	RJMP _0x45
                 _0x44:
00026e e0e0      	LDI  R30,LOW(0)
                 _0x45:
00026f 2e5e      	MOV  R5,R30
                 ; 0000 012B       }
                 ; 0000 012C       lcd_gotoxy(col,row);
                 _0x43:
000270 924a      	ST   -Y,R4
000271 2da5      	MOV  R26,R5
000272 940e 02bf 	CALL _lcd_gotoxy
                 ; 0000 012D 
                 ; 0000 012E 
                 ; 0000 012F       lcd_putsf("Prees Interupt To type pass");
                +
000274 eaad     +LDI R26 , LOW ( 2 * _0x0 + ( 87 ) )
000275 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 87 ) )
                 	__POINTW2FN _0x0,87
000276 940e 030b 	CALL _lcd_putsf
                 ; 0000 0130       delay_ms(100);
000278 e6a4      	LDI  R26,LOW(100)
000279 e0b0      	LDI  R27,0
00027a 940e 051f 	CALL SUBOPT_0x0
                 ; 0000 0131       lcd_clear();
                 ; 0000 0132       col ++;
00027c 9443      	INC  R4
                 ; 0000 0133 
                 ; 0000 0134     }
00027d cfe8      	RJMP _0x40
                 ; 0000 0135  }
                 _0x47:
00027e cfff      	RJMP _0x47
                 ; .FEND
                 ;
                 ;
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
                 ; .FSTART __lcd_delay_G100
00027f e0ff          ldi   r31,15
                 __lcd_delay0:
000280 95fa          dec   r31
000281 f7f1          brne  __lcd_delay0
000282 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000283 b3aa          in    r26,__lcd_direction
000284 70af          andi  r26,0xf                 ;set as input
000285 bbaa          out   __lcd_direction,r26
000286 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000287 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000288 dff6      	RCALL __lcd_delay_G100
000289 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00028a dff4      	RCALL __lcd_delay_G100
00028b b3a9          in    r26,__lcd_pin
00028c 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00028d dff1      	RCALL __lcd_delay_G100
00028e 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
00028f dfef      	RCALL __lcd_delay_G100
000290 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000291 fda7          sbrc  r26,__lcd_busy_flag
000292 cff5          rjmp  __lcd_busy
000293 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000294 7fa0          andi  r26,0xf0
000295 2bab          or    r26,r27
000296 bbab          out   __lcd_port,r26          ;write
000297 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
000298 940e 027f 	CALL __lcd_delay_G100
00029a 98da          cbi   __lcd_port,__lcd_enable ;EN=0
00029b 940e 027f 	CALL __lcd_delay_G100
00029d 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00029e 93aa      	ST   -Y,R26
00029f 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002a0 b3aa          in    r26,__lcd_direction
0002a1 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0002a2 bbaa          out   __lcd_direction,r26
0002a3 b3bb          in    r27,__lcd_port
0002a4 70bf          andi  r27,0xf
0002a5 81a8          ld    r26,y
0002a6 dfed      	RCALL __lcd_write_nibble_G100
0002a7 81a8          ld    r26,y
0002a8 95a2          swap  r26
0002a9 dfea      	RCALL __lcd_write_nibble_G100
0002aa 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002ab 940c 0360 	JMP  _0x20C0004
                 ; .FEND
                 __lcd_read_nibble_G100:
                 ; .FSTART __lcd_read_nibble_G100
0002ad 9ada          sbi   __lcd_port,__lcd_enable ;EN=1
0002ae 940e 027f 	CALL __lcd_delay_G100
0002b0 b3e9          in    r30,__lcd_pin           ;read
0002b1 98da          cbi   __lcd_port,__lcd_enable ;EN=0
0002b2 940e 027f 	CALL __lcd_delay_G100
0002b4 7fe0          andi  r30,0xf0
0002b5 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G100:
                 ; .FSTART _lcd_read_byte0_G100
0002b6 940e 027f 	CALL __lcd_delay_G100
0002b8 dff4      	RCALL __lcd_read_nibble_G100
0002b9 2fae          mov   r26,r30
0002ba dff2      	RCALL __lcd_read_nibble_G100
0002bb 98d9          cbi   __lcd_port,__lcd_rd     ;RD=0
0002bc 95e2          swap  r30
0002bd 2bea          or    r30,r26
0002be 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002bf 93aa      	ST   -Y,R26
0002c0 940e 0283 	CALL __lcd_ready
0002c2 81e8      	LD   R30,Y
0002c3 e0f0      	LDI  R31,0
0002c4 54e2      	SUBI R30,LOW(-__base_y_G100)
0002c5 4ffe      	SBCI R31,HIGH(-__base_y_G100)
0002c6 81e0      	LD   R30,Z
0002c7 81a9      	LDD  R26,Y+1
0002c8 0fae      	ADD  R26,R30
0002c9 940e 029e 	CALL __lcd_write_data
0002cb 8069      	LDD  R6,Y+1
0002cc 8098      	LDD  R9,Y+0
0002cd 9622      	ADIW R28,2
0002ce 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002cf 940e 0283 	CALL __lcd_ready
0002d1 e0a2      	LDI  R26,LOW(2)
0002d2 940e 029e 	CALL __lcd_write_data
0002d4 940e 0283 	CALL __lcd_ready
0002d6 e0ac      	LDI  R26,LOW(12)
0002d7 940e 029e 	CALL __lcd_write_data
0002d9 940e 0283 	CALL __lcd_ready
0002db e0a1      	LDI  R26,LOW(1)
0002dc 940e 029e 	CALL __lcd_write_data
0002de e0e0      	LDI  R30,LOW(0)
0002df 2e9e      	MOV  R9,R30
0002e0 2e6e      	MOV  R6,R30
0002e1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002e2 93aa      	ST   -Y,R26
0002e3 93ef          push r30
0002e4 93ff          push r31
0002e5 81a8          ld   r26,y
0002e6 9468          set
0002e7 30aa          cpi  r26,10
0002e8 f019          breq __lcd_putchar1
0002e9 94e8          clt
0002ea 1468      	CP   R6,R8
0002eb f030      	BRLO _0x2000004
                 	__lcd_putchar1:
0002ec 9493      	INC  R9
0002ed e0e0      	LDI  R30,LOW(0)
0002ee 93ea      	ST   -Y,R30
0002ef 2da9      	MOV  R26,R9
0002f0 dfce      	RCALL _lcd_gotoxy
0002f1 f036      	brts __lcd_putchar0
                 _0x2000004:
0002f2 9463      	INC  R6
0002f3 df8f          rcall __lcd_ready
0002f4 9ad8          sbi  __lcd_port,__lcd_rs ;RS=1
0002f5 81a8      	LD   R26,Y
0002f6 940e 029e 	CALL __lcd_write_data
                 __lcd_putchar0:
0002f8 91ff          pop  r31
0002f9 91ef          pop  r30
0002fa 940c 0360 	JMP  _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002fc 93ba      	ST   -Y,R27
0002fd 93aa      	ST   -Y,R26
0002fe 931a      	ST   -Y,R17
                 _0x2000005:
0002ff 81a9      	LDD  R26,Y+1
000300 81ba      	LDD  R27,Y+1+1
000301 91ed      	LD   R30,X+
000302 83a9      	STD  Y+1,R26
000303 83ba      	STD  Y+1+1,R27
000304 2f1e      	MOV  R17,R30
000305 30e0      	CPI  R30,0
000306 f019      	BREQ _0x2000007
000307 2fa1      	MOV  R26,R17
000308 dfd9      	RCALL _lcd_putchar
000309 cff5      	RJMP _0x2000005
                 _0x2000007:
00030a c010      	RJMP _0x20C0005
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00030b 93ba      	ST   -Y,R27
00030c 93aa      	ST   -Y,R26
00030d 931a      	ST   -Y,R17
                 _0x2000008:
00030e 81e9      	LDD  R30,Y+1
00030f 81fa      	LDD  R31,Y+1+1
000310 9631      	ADIW R30,1
000311 83e9      	STD  Y+1,R30
000312 83fa      	STD  Y+1+1,R31
000313 9731      	SBIW R30,1
000314 91e4      	LPM  R30,Z
000315 2f1e      	MOV  R17,R30
000316 30e0      	CPI  R30,0
000317 f019      	BREQ _0x200000A
000318 2fa1      	MOV  R26,R17
000319 dfc8      	RCALL _lcd_putchar
00031a cff3      	RJMP _0x2000008
                 _0x200000A:
                 _0x20C0005:
00031b 8118      	LDD  R17,Y+0
00031c 9623      	ADIW R28,3
00031d 9508      	RET
                 ; .FEND
                 __long_delay_G100:
                 ; .FSTART __long_delay_G100
00031e 27aa          clr   r26
00031f 27bb          clr   r27
                 __long_delay0:
000320 9711          sbiw  r26,1         ;2 cycles
000321 f7f1          brne  __long_delay0 ;2 cycles
000322 9508      	RET
                 ; .FEND
                 __lcd_init_write_G100:
                 ; .FSTART __lcd_init_write_G100
000323 93aa      	ST   -Y,R26
000324 98d9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000325 b3aa          in    r26,__lcd_direction
000326 6fa7          ori   r26,0xf7                ;set as output
000327 bbaa          out   __lcd_direction,r26
000328 b3bb          in    r27,__lcd_port
000329 70bf          andi  r27,0xf
00032a 81a8          ld    r26,y
00032b 940e 0294 	CALL __lcd_write_nibble_G100
00032d 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
00032e c031      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00032f 93aa      	ST   -Y,R26
000330 98da          cbi   __lcd_port,__lcd_enable ;EN=0
000331 98d8          cbi   __lcd_port,__lcd_rs     ;RS=0
000332 8088      	LDD  R8,Y+0
000333 81e8      	LD   R30,Y
000334 58e0      	SUBI R30,-LOW(128)
                +
000335 93e0 01c0+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000337 81e8      	LD   R30,Y
000338 54e0      	SUBI R30,-LOW(192)
                +
000339 93e0 01c1+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00033b 940e 053d 	CALL SUBOPT_0x5
00033d 940e 053d 	CALL SUBOPT_0x5
00033f 940e 053d 	CALL SUBOPT_0x5
000341 dfdc      	RCALL __long_delay_G100
000342 e2a0      	LDI  R26,LOW(32)
000343 dfdf      	RCALL __lcd_init_write_G100
000344 dfd9      	RCALL __long_delay_G100
000345 e2a8      	LDI  R26,LOW(40)
000346 940e 0542 	CALL SUBOPT_0x6
000348 e0a4      	LDI  R26,LOW(4)
000349 940e 0542 	CALL SUBOPT_0x6
00034b e8a5      	LDI  R26,LOW(133)
00034c 940e 0542 	CALL SUBOPT_0x6
00034e b3aa          in    r26,__lcd_direction
00034f 70af          andi  r26,0xf                 ;set as input
000350 bbaa          out   __lcd_direction,r26
000351 9ad9          sbi   __lcd_port,__lcd_rd     ;RD=1
000352 940e 02b6 	CALL _lcd_read_byte0_G100
000354 30e5      	CPI  R30,LOW(0x5)
000355 f011      	BREQ _0x200000B
000356 e0e0      	LDI  R30,LOW(0)
000357 c008      	RJMP _0x20C0004
                 _0x200000B:
000358 940e 0283 	CALL __lcd_ready
00035a e0a6      	LDI  R26,LOW(6)
00035b 940e 029e 	CALL __lcd_write_data
00035d 940e 02cf 	CALL _lcd_clear
00035f e0e1      	LDI  R30,LOW(1)
                 _0x20C0004:
000360 9621      	ADIW R28,1
000361 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _get_buff_G101:
                 ; .FSTART _get_buff_G101
000362 93ba      	ST   -Y,R27
000363 93aa      	ST   -Y,R26
000364 931a      	ST   -Y,R17
000365 81a9      	LDD  R26,Y+1
000366 81ba      	LDD  R27,Y+1+1
000367 e0e0      	LDI  R30,LOW(0)
000368 93ec      	ST   X,R30
000369 81ab      	LDD  R26,Y+3
00036a 81bc      	LDD  R27,Y+3+1
00036b 91ec      	LD   R30,X
00036c 2f1e      	MOV  R17,R30
00036d 30e0      	CPI  R30,0
00036e f019      	BREQ _0x20200C1
00036f e0e0      	LDI  R30,LOW(0)
000370 93ec      	ST   X,R30
000371 c019      	RJMP _0x20200C2
                 _0x20200C1:
000372 81a9      	LDD  R26,Y+1
000373 81ba      	LDD  R27,Y+1+1
000374 9611      	ADIW R26,1
000375 940e 0582 	CALL __GETW1P
000377 9730      	SBIW R30,0
000378 f089      	BREQ _0x20200C3
000379 81e9      	LDD  R30,Y+1
00037a 81fa      	LDD  R31,Y+1+1
00037b 81a1      	LDD  R26,Z+1
00037c 81b2      	LDD  R27,Z+2
00037d 91ec      	LD   R30,X
00037e 2f1e      	MOV  R17,R30
00037f 30e0      	CPI  R30,0
000380 f041      	BREQ _0x20200C4
000381 81a9      	LDD  R26,Y+1
000382 81ba      	LDD  R27,Y+1+1
000383 9611      	ADIW R26,1
000384 91ed      	LD   R30,X+
000385 91fd      	LD   R31,X+
000386 9631      	ADIW R30,1
000387 93fe      	ST   -X,R31
000388 93ee      	ST   -X,R30
                 _0x20200C4:
000389 c001      	RJMP _0x20200C5
                 _0x20200C3:
00038a e010      	LDI  R17,LOW(0)
                 _0x20200C5:
                 _0x20200C2:
00038b 2fe1      	MOV  R30,R17
00038c 8118      	LDD  R17,Y+0
00038d 9625      	ADIW R28,5
00038e 9508      	RET
                 ; .FEND
                 __scanf_G101:
                 ; .FSTART __scanf_G101
00038f 92ff      	PUSH R15
000390 93ba      	ST   -Y,R27
000391 93aa      	ST   -Y,R26
000392 9724      	SBIW R28,4
000393 940e 05ba 	CALL __SAVELOCR6
000395 e0e0      	LDI  R30,LOW(0)
000396 e0f0      	LDI  R31,HIGH(0)
000397 87e8      	STD  Y+8,R30
000398 87f9      	STD  Y+8+1,R31
000399 2f4e      	MOV  R20,R30
                 _0x20200C6:
00039a 89e8      	LDD  R30,Y+16
00039b 89f9      	LDD  R31,Y+16+1
00039c 9631      	ADIW R30,1
00039d 8be8      	STD  Y+16,R30
00039e 8bf9      	STD  Y+16+1,R31
00039f 9731      	SBIW R30,1
0003a0 91e4      	LPM  R30,Z
0003a1 2f3e      	MOV  R19,R30
0003a2 30e0      	CPI  R30,0
0003a3 f409      	BRNE PC+2
0003a4 c125      	RJMP _0x20200C8
0003a5 940e 0546 	CALL SUBOPT_0x7
0003a7 f0c1      	BREQ _0x20200C9
                 _0x20200CA:
0003a8 b7ed      	IN   R30,SPL
0003a9 b7fe      	IN   R31,SPH
0003aa 93fa      	ST   -Y,R31
0003ab 93ea      	ST   -Y,R30
0003ac 934f      	PUSH R20
0003ad 940e 054b 	CALL SUBOPT_0x8
0003af 914f      	POP  R20
0003b0 2f3e      	MOV  R19,R30
0003b1 30e0      	CPI  R30,0
0003b2 f019      	BREQ _0x20200CD
0003b3 940e 0546 	CALL SUBOPT_0x7
0003b5 f409      	BRNE _0x20200CE
                 _0x20200CD:
0003b6 c007      	RJMP _0x20200CC
                 _0x20200CE:
0003b7 940e 0551 	CALL SUBOPT_0x9
0003b9 f41c      	BRGE _0x20200CF
0003ba efef      	LDI  R30,LOW(65535)
0003bb efff      	LDI  R31,HIGH(65535)
0003bc c10f      	RJMP _0x20C0002
                 _0x20200CF:
0003bd cfea      	RJMP _0x20200CA
                 _0x20200CC:
0003be 2f43      	MOV  R20,R19
0003bf c109      	RJMP _0x20200D0
                 _0x20200C9:
0003c0 3235      	CPI  R19,37
0003c1 f009      	BREQ PC+2
0003c2 c0ee      	RJMP _0x20200D1
0003c3 e050      	LDI  R21,LOW(0)
                 _0x20200D2:
0003c4 89e8      	LDD  R30,Y+16
0003c5 89f9      	LDD  R31,Y+16+1
0003c6 9135      	LPM  R19,Z+
0003c7 8be8      	STD  Y+16,R30
0003c8 8bf9      	STD  Y+16+1,R31
0003c9 3330      	CPI  R19,48
0003ca f010      	BRLO _0x20200D6
0003cb 333a      	CPI  R19,58
0003cc f008      	BRLO _0x20200D5
                 _0x20200D6:
0003cd c007      	RJMP _0x20200D4
                 _0x20200D5:
0003ce e0aa      	LDI  R26,LOW(10)
0003cf 9f5a      	MUL  R21,R26
0003d0 2d50      	MOV  R21,R0
0003d1 2fe3      	MOV  R30,R19
0003d2 53e0      	SUBI R30,LOW(48)
0003d3 0f5e      	ADD  R21,R30
0003d4 cfef      	RJMP _0x20200D2
                 _0x20200D4:
0003d5 3030      	CPI  R19,0
0003d6 f409      	BRNE _0x20200D8
0003d7 c0f2      	RJMP _0x20200C8
                 _0x20200D8:
                 _0x20200D9:
0003d8 b7ed      	IN   R30,SPL
0003d9 b7fe      	IN   R31,SPH
0003da 93fa      	ST   -Y,R31
0003db 93ea      	ST   -Y,R30
0003dc 934f      	PUSH R20
0003dd 940e 054b 	CALL SUBOPT_0x8
0003df 914f      	POP  R20
0003e0 2f2e      	MOV  R18,R30
0003e1 2fae      	MOV  R26,R30
0003e2 940e 0505 	CALL _isspace
0003e4 30e0      	CPI  R30,0
0003e5 f039      	BREQ _0x20200DB
0003e6 940e 0551 	CALL SUBOPT_0x9
0003e8 f41c      	BRGE _0x20200DC
0003e9 efef      	LDI  R30,LOW(65535)
0003ea efff      	LDI  R31,HIGH(65535)
0003eb c0e0      	RJMP _0x20C0002
                 _0x20200DC:
0003ec cfeb      	RJMP _0x20200D9
                 _0x20200DB:
0003ed 3020      	CPI  R18,0
0003ee f409      	BRNE _0x20200DD
0003ef c0d1      	RJMP _0x20200DE
                 _0x20200DD:
0003f0 2f42      	MOV  R20,R18
0003f1 3050      	CPI  R21,0
0003f2 f409      	BRNE _0x20200DF
0003f3 ef5f      	LDI  R21,LOW(255)
                 _0x20200DF:
0003f4 2fe3      	MOV  R30,R19
0003f5 36e3      	CPI  R30,LOW(0x63)
0003f6 f499      	BRNE _0x20200E3
0003f7 940e 0556 	CALL SUBOPT_0xA
0003f9 b7ed      	IN   R30,SPL
0003fa b7fe      	IN   R31,SPH
0003fb 93fa      	ST   -Y,R31
0003fc 93ea      	ST   -Y,R30
0003fd 934f      	PUSH R20
0003fe 940e 054b 	CALL SUBOPT_0x8
000400 914f      	POP  R20
000401 01d8      	MOVW R26,R16
000402 93ec      	ST   X,R30
000403 940e 0551 	CALL SUBOPT_0x9
000405 f41c      	BRGE _0x20200E4
000406 efef      	LDI  R30,LOW(65535)
000407 efff      	LDI  R31,HIGH(65535)
000408 c0c3      	RJMP _0x20C0002
                 _0x20200E4:
000409 c0a1      	RJMP _0x20200E2
                 _0x20200E3:
00040a 37e3      	CPI  R30,LOW(0x73)
00040b f541      	BRNE _0x20200ED
00040c 940e 0556 	CALL SUBOPT_0xA
                 _0x20200E6:
00040e 2fe5      	MOV  R30,R21
00040f 5051      	SUBI R21,1
000410 30e0      	CPI  R30,0
000411 f0f1      	BREQ _0x20200E8
000412 b7ed      	IN   R30,SPL
000413 b7fe      	IN   R31,SPH
000414 93fa      	ST   -Y,R31
000415 93ea      	ST   -Y,R30
000416 934f      	PUSH R20
000417 940e 054b 	CALL SUBOPT_0x8
000419 914f      	POP  R20
00041a 2f3e      	MOV  R19,R30
00041b 30e0      	CPI  R30,0
00041c f019      	BREQ _0x20200EA
00041d 940e 0546 	CALL SUBOPT_0x7
00041f f039      	BREQ _0x20200E9
                 _0x20200EA:
000420 940e 0551 	CALL SUBOPT_0x9
000422 f41c      	BRGE _0x20200EC
000423 efef      	LDI  R30,LOW(65535)
000424 efff      	LDI  R31,HIGH(65535)
000425 c0a6      	RJMP _0x20C0002
                 _0x20200EC:
000426 c009      	RJMP _0x20200E8
                 _0x20200E9:
000427 931f      	PUSH R17
000428 930f      	PUSH R16
                +
000429 5f0f     +SUBI R16 , LOW ( - 1 )
00042a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00042b 2fe3      	MOV  R30,R19
00042c 91af      	POP  R26
00042d 91bf      	POP  R27
00042e 93ec      	ST   X,R30
00042f cfde      	RJMP _0x20200E6
                 _0x20200E8:
000430 01d8      	MOVW R26,R16
000431 e0e0      	LDI  R30,LOW(0)
000432 93ec      	ST   X,R30
000433 c077      	RJMP _0x20200E2
                 _0x20200ED:
000434 9468      	SET
000435 f8f1      	BLD  R15,1
000436 94e8      	CLT
000437 f8f2      	BLD  R15,2
000438 2fe3      	MOV  R30,R19
000439 36e4      	CPI  R30,LOW(0x64)
00043a f011      	BREQ _0x20200F2
00043b 36e9      	CPI  R30,LOW(0x69)
00043c f419      	BRNE _0x20200F3
                 _0x20200F2:
00043d 94e8      	CLT
00043e f8f1      	BLD  R15,1
00043f c002      	RJMP _0x20200F4
                 _0x20200F3:
000440 37e5      	CPI  R30,LOW(0x75)
000441 f411      	BRNE _0x20200F5
                 _0x20200F4:
000442 e02a      	LDI  R18,LOW(10)
000443 c008      	RJMP _0x20200F0
                 _0x20200F5:
000444 37e8      	CPI  R30,LOW(0x78)
000445 f411      	BRNE _0x20200F6
000446 e120      	LDI  R18,LOW(16)
000447 c004      	RJMP _0x20200F0
                 _0x20200F6:
000448 32e5      	CPI  R30,LOW(0x25)
000449 f409      	BRNE _0x20200F9
00044a c066      	RJMP _0x20200F8
                 _0x20200F9:
00044b c07e      	RJMP _0x20C0003
                 _0x20200F0:
00044c e0e0      	LDI  R30,LOW(0)
00044d 83ee      	STD  Y+6,R30
00044e 83ef      	STD  Y+6+1,R30
00044f 9468      	SET
000450 f8f0      	BLD  R15,0
                 _0x20200FA:
000451 2fe5      	MOV  R30,R21
000452 5051      	SUBI R21,1
000453 30e0      	CPI  R30,0
000454 f409      	BRNE PC+2
000455 c046      	RJMP _0x20200FC
000456 b7ed      	IN   R30,SPL
000457 b7fe      	IN   R31,SPH
000458 93fa      	ST   -Y,R31
000459 93ea      	ST   -Y,R30
00045a 934f      	PUSH R20
00045b 940e 054b 	CALL SUBOPT_0x8
00045d 914f      	POP  R20
00045e 2f3e      	MOV  R19,R30
00045f 32e1      	CPI  R30,LOW(0x21)
000460 f438      	BRSH _0x20200FD
000461 940e 0551 	CALL SUBOPT_0x9
000463 f41c      	BRGE _0x20200FE
000464 efef      	LDI  R30,LOW(65535)
000465 efff      	LDI  R31,HIGH(65535)
000466 c065      	RJMP _0x20C0002
                 _0x20200FE:
000467 c017      	RJMP _0x20200FF
                 _0x20200FD:
000468 fcf1      	SBRC R15,1
000469 c008      	RJMP _0x2020100
00046a 9468      	SET
00046b f8f1      	BLD  R15,1
00046c 323d      	CPI  R19,45
00046d f411      	BRNE _0x2020101
00046e f8f2      	BLD  R15,2
00046f cfe1      	RJMP _0x20200FA
                 _0x2020101:
000470 323b      	CPI  R19,43
000471 f2f9      	BREQ _0x20200FA
                 _0x2020100:
000472 3120      	CPI  R18,16
000473 f431      	BRNE _0x2020103
000474 2fa3      	MOV  R26,R19
000475 940e 0510 	CALL _isxdigit
000477 30e0      	CPI  R30,0
000478 f031      	BREQ _0x20200FF
000479 c009      	RJMP _0x2020105
                 _0x2020103:
00047a 2fa3      	MOV  R26,R19
00047b 940e 04fc 	CALL _isdigit
00047d 30e0      	CPI  R30,0
00047e f421      	BRNE _0x2020106
                 _0x20200FF:
00047f fcf0      	SBRC R15,0
000480 c049      	RJMP _0x2020108
000481 2f43      	MOV  R20,R19
000482 c019      	RJMP _0x20200FC
                 _0x2020106:
                 _0x2020105:
000483 3631      	CPI  R19,97
000484 f010      	BRLO _0x2020109
000485 5537      	SUBI R19,LOW(87)
000486 c005      	RJMP _0x202010A
                 _0x2020109:
000487 3431      	CPI  R19,65
000488 f010      	BRLO _0x202010B
000489 5337      	SUBI R19,LOW(55)
00048a c001      	RJMP _0x202010C
                 _0x202010B:
00048b 5330      	SUBI R19,LOW(48)
                 _0x202010C:
                 _0x202010A:
00048c 2fe2      	MOV  R30,R18
00048d 81ae      	LDD  R26,Y+6
00048e 81bf      	LDD  R27,Y+6+1
00048f e0f0      	LDI  R31,0
000490 940e 057a 	CALL __MULW12U
000492 01df      	MOVW R26,R30
000493 2fe3      	MOV  R30,R19
000494 e0f0      	LDI  R31,0
000495 0fea      	ADD  R30,R26
000496 1ffb      	ADC  R31,R27
000497 83ee      	STD  Y+6,R30
000498 83ff      	STD  Y+6+1,R31
000499 94e8      	CLT
00049a f8f0      	BLD  R15,0
00049b cfb5      	RJMP _0x20200FA
                 _0x20200FC:
00049c 940e 0556 	CALL SUBOPT_0xA
00049e fef2      	SBRS R15,2
00049f c006      	RJMP _0x202010D
0004a0 81ee      	LDD  R30,Y+6
0004a1 81ff      	LDD  R31,Y+6+1
0004a2 940e 0576 	CALL __ANEGW1
0004a4 83ee      	STD  Y+6,R30
0004a5 83ff      	STD  Y+6+1,R31
                 _0x202010D:
0004a6 81ee      	LDD  R30,Y+6
0004a7 81ff      	LDD  R31,Y+6+1
0004a8 01d8      	MOVW R26,R16
0004a9 93ed      	ST   X+,R30
0004aa 93fc      	ST   X,R31
                 _0x20200E2:
0004ab 85e8      	LDD  R30,Y+8
0004ac 85f9      	LDD  R31,Y+8+1
0004ad 9631      	ADIW R30,1
0004ae 87e8      	STD  Y+8,R30
0004af 87f9      	STD  Y+8+1,R31
0004b0 c018      	RJMP _0x202010E
                 _0x20200D1:
                 _0x20200F8:
0004b1 b7ed      	IN   R30,SPL
0004b2 b7fe      	IN   R31,SPH
0004b3 93fa      	ST   -Y,R31
0004b4 93ea      	ST   -Y,R30
0004b5 934f      	PUSH R20
0004b6 940e 054b 	CALL SUBOPT_0x8
0004b8 914f      	POP  R20
0004b9 17e3      	CP   R30,R19
0004ba f071      	BREQ _0x202010F
0004bb 940e 0551 	CALL SUBOPT_0x9
0004bd f41c      	BRGE _0x2020110
0004be efef      	LDI  R30,LOW(65535)
0004bf efff      	LDI  R31,HIGH(65535)
0004c0 c00b      	RJMP _0x20C0002
                 _0x2020110:
                 _0x20200DE:
0004c1 85e8      	LDD  R30,Y+8
0004c2 85f9      	LDD  R31,Y+8+1
0004c3 9730      	SBIW R30,0
0004c4 f419      	BRNE _0x2020111
0004c5 efef      	LDI  R30,LOW(65535)
0004c6 efff      	LDI  R31,HIGH(65535)
0004c7 c004      	RJMP _0x20C0002
                 _0x2020111:
0004c8 c001      	RJMP _0x20200C8
                 _0x202010F:
                 _0x202010E:
                 _0x20200D0:
0004c9 ced0      	RJMP _0x20200C6
                 _0x20200C8:
                 _0x2020108:
                 _0x20C0003:
0004ca 85e8      	LDD  R30,Y+8
0004cb 85f9      	LDD  R31,Y+8+1
                 _0x20C0002:
0004cc 940e 05c1 	CALL __LOADLOCR6
0004ce 9662      	ADIW R28,18
0004cf 90ff      	POP  R15
0004d0 9508      	RET
                 ; .FEND
                 _sscanf:
                 ; .FSTART _sscanf
0004d1 92ff      	PUSH R15
0004d2 2ef8      	MOV  R15,R24
0004d3 9723      	SBIW R28,3
0004d4 931a      	ST   -Y,R17
0004d5 930a      	ST   -Y,R16
0004d6 940e 0561 	CALL SUBOPT_0xB
0004d8 9730      	SBIW R30,0
0004d9 f419      	BRNE _0x2020112
0004da efef      	LDI  R30,LOW(65535)
0004db efff      	LDI  R31,HIGH(65535)
0004dc c01a      	RJMP _0x20C0001
                 _0x2020112:
0004dd 01de      	MOVW R26,R28
0004de 9611      	ADIW R26,1
0004df 940e 0572 	CALL __ADDW2R15
0004e1 018d      	MOVW R16,R26
0004e2 940e 0561 	CALL SUBOPT_0xB
0004e4 83eb      	STD  Y+3,R30
0004e5 83fc      	STD  Y+3+1,R31
0004e6 01de      	MOVW R26,R28
0004e7 9615      	ADIW R26,5
0004e8 940e 0572 	CALL __ADDW2R15
0004ea 940e 0582 	CALL __GETW1P
0004ec 93fa      	ST   -Y,R31
0004ed 93ea      	ST   -Y,R30
0004ee 931a      	ST   -Y,R17
0004ef 930a      	ST   -Y,R16
0004f0 e6e2      	LDI  R30,LOW(_get_buff_G101)
0004f1 e0f3      	LDI  R31,HIGH(_get_buff_G101)
0004f2 93fa      	ST   -Y,R31
0004f3 93ea      	ST   -Y,R30
0004f4 01de      	MOVW R26,R28
0004f5 9618      	ADIW R26,8
0004f6 de98      	RCALL __scanf_G101
                 _0x20C0001:
0004f7 8119      	LDD  R17,Y+1
0004f8 8108      	LDD  R16,Y+0
0004f9 9625      	ADIW R28,5
0004fa 90ff      	POP  R15
0004fb 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
0004fc 93aa      	ST   -Y,R26
0004fd e0e1          ldi  r30,1
0004fe 91f9          ld   r31,y+
0004ff 33f0          cpi  r31,'0'
000500 f010          brlo isdigit0
000501 33fa          cpi  r31,'9'+1
000502 f008          brlo isdigit1
                 isdigit0:
000503 27ee          clr  r30
                 isdigit1:
000504 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
000505 93aa      	ST   -Y,R26
000506 e0e1          ldi  r30,1
000507 91f9          ld   r31,y+
000508 32f0          cpi  r31,' '
000509 f029          breq isspace1
00050a 30f9          cpi  r31,9
00050b f010          brlo isspace0
00050c 30fe          cpi  r31,13+1
00050d f008          brlo isspace1
                 isspace0:
00050e 27ee          clr  r30
                 isspace1:
00050f 9508          ret
                 ; .FEND
                 _isxdigit:
                 ; .FSTART _isxdigit
000510 93aa      	ST   -Y,R26
000511 e0e1          ldi  r30,1
000512 91f9          ld   r31,y+
000513 53f0          subi r31,0x30
000514 f040          brcs isxdigit0
000515 30fa          cpi  r31,10
000516 f038          brcs isxdigit1
000517 75ff          andi r31,0x5f
000518 50f7          subi r31,7
000519 30fa          cpi  r31,10
00051a f010          brcs isxdigit0
00051b 31f0          cpi  r31,16
00051c f008          brcs isxdigit1
                 isxdigit0:
00051d 27ee          clr  r30
                 isxdigit1:
00051e 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _pass:
000000           	.BYTE 0x2
                 _j:
000002           	.BYTE 0x2
                 
                 	.DSEG
                 _key:
0001b4           	.BYTE 0xA
                 __base_y_G100:
0001be           	.BYTE 0x4
                 __seed_G105:
0001c2           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00051f 940e 0568 	CALL _delay_ms
000521 940c 02cf 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000523 e0a2      	LDI  R26,LOW(_j)
000524 e0b0      	LDI  R27,HIGH(_j)
000525 940e 058d 	CALL __EEPROMRDW
000527 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000528 940e 01c6 	CALL _enter_pass
00052a 010f      	MOVW R0,R30
00052b e0a0      	LDI  R26,LOW(_pass)
00052c e0b0      	LDI  R27,HIGH(_pass)
00052d 940e 058d 	CALL __EEPROMRDW
00052f 15e0      	CP   R30,R0
000530 05f1      	CPC  R31,R1
000531 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000532 940e 02fc 	CALL _lcd_puts
000534 efa4      	LDI  R26,LOW(500)
000535 e0b1      	LDI  R27,HIGH(500)
000536 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000537 eba4      	LDI  R26,LOW(_key)
000538 e0b1      	LDI  R27,HIGH(_key)
000539 0fa2      	ADD  R26,R18
00053a 1fb3      	ADC  R27,R19
00053b 91ac      	LD   R26,X
00053c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00053d 940e 031e 	CALL __long_delay_G100
00053f e3a0      	LDI  R26,LOW(48)
000540 940c 0323 	JMP  __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000542 940e 029e 	CALL __lcd_write_data
000544 940c 031e 	JMP  __long_delay_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000546 2fa3      	MOV  R26,R19
000547 940e 0505 	CALL _isspace
000549 30e0      	CPI  R30,0
00054a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x8:
00054b 85ac      	LDD  R26,Y+12
00054c 85bd      	LDD  R27,Y+12+1
00054d 85ee      	LDD  R30,Y+14
00054e 85ff      	LDD  R31,Y+14+1
00054f 9509      	ICALL
000550 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
000551 85aa      	LDD  R26,Y+10
000552 85bb      	LDD  R27,Y+10+1
000553 91ac      	LD   R26,X
000554 30a0      	CPI  R26,0
000555 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
000556 85ee      	LDD  R30,Y+14
000557 85ff      	LDD  R31,Y+14+1
000558 9734      	SBIW R30,4
000559 87ee      	STD  Y+14,R30
00055a 87ff      	STD  Y+14+1,R31
00055b 85ae      	LDD  R26,Y+14
00055c 85bf      	LDD  R27,Y+14+1
00055d 9614      	ADIW R26,4
00055e 910d      	LD   R16,X+
00055f 911c      	LD   R17,X
000560 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000561 01de      	MOVW R26,R28
000562 9617      	ADIW R26,7
000563 940e 0572 	CALL __ADDW2R15
000565 940e 0582 	CALL __GETW1P
000567 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000568 9610      	adiw r26,0
000569 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00056a ed80     +LDI R24 , LOW ( 0x7D0 )
00056b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00056c 9701     +SBIW R24 , 1
00056d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00056e 95a8      	wdr
00056f 9711      	sbiw r26,1
000570 f7c9      	brne __delay_ms0
                 __delay_ms1:
000571 9508      	ret
                 
                 __ADDW2R15:
000572 2400      	CLR  R0
000573 0daf      	ADD  R26,R15
000574 1db0      	ADC  R27,R0
000575 9508      	RET
                 
                 __ANEGW1:
000576 95f1      	NEG  R31
000577 95e1      	NEG  R30
000578 40f0      	SBCI R31,0
000579 9508      	RET
                 
                 __MULW12U:
00057a 9ffa      	MUL  R31,R26
00057b 2df0      	MOV  R31,R0
00057c 9feb      	MUL  R30,R27
00057d 0df0      	ADD  R31,R0
00057e 9fea      	MUL  R30,R26
00057f 2de0      	MOV  R30,R0
000580 0df1      	ADD  R31,R1
000581 9508      	RET
                 
                 __GETW1P:
000582 91ed      	LD   R30,X+
000583 91fc      	LD   R31,X
000584 9711      	SBIW R26,1
000585 9508      	RET
                 
                 __PUTPARD1L:
000586 e060      	LDI  R22,0
000587 e070      	LDI  R23,0
                 __PUTPARD1:
000588 937a      	ST   -Y,R23
000589 936a      	ST   -Y,R22
00058a 93fa      	ST   -Y,R31
00058b 93ea      	ST   -Y,R30
00058c 9508      	RET
                 
                 __EEPROMRDW:
00058d 9611      	ADIW R26,1
00058e d002      	RCALL __EEPROMRDB
00058f 2ffe      	MOV  R31,R30
000590 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000591 99e1      	SBIC EECR,EEWE
000592 cffe      	RJMP __EEPROMRDB
000593 93ff      	PUSH R31
000594 b7ff      	IN   R31,SREG
000595 94f8      	CLI
000596 bbae      	OUT  EEARL,R26
000597 bbbf      	OUT  EEARH,R27
000598 9ae0      	SBI  EECR,EERE
000599 b3ed      	IN   R30,EEDR
00059a bfff      	OUT  SREG,R31
00059b 91ff      	POP  R31
00059c 9508      	RET
                 
                 __EEPROMWRW:
00059d d007      	RCALL __EEPROMWRB
00059e 9611      	ADIW R26,1
00059f 93ef      	PUSH R30
0005a0 2fef      	MOV  R30,R31
0005a1 d003      	RCALL __EEPROMWRB
0005a2 91ef      	POP  R30
0005a3 9711      	SBIW R26,1
0005a4 9508      	RET
                 
                 __EEPROMWRB:
0005a5 9be1      	SBIS EECR,EEWE
0005a6 c002      	RJMP __EEPROMWRB1
0005a7 95a8      	WDR
0005a8 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0005a9 b79f      	IN   R25,SREG
0005aa 94f8      	CLI
0005ab bbae      	OUT  EEARL,R26
0005ac bbbf      	OUT  EEARH,R27
0005ad 9ae0      	SBI  EECR,EERE
0005ae b38d      	IN   R24,EEDR
0005af 17e8      	CP   R30,R24
0005b0 f019      	BREQ __EEPROMWRB0
0005b1 bbed      	OUT  EEDR,R30
0005b2 9ae2      	SBI  EECR,EEMWE
0005b3 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0005b4 bf9f      	OUT  SREG,R25
0005b5 9508      	RET
                 
                 __CPW01:
0005b6 2400      	CLR  R0
0005b7 160e      	CP   R0,R30
0005b8 060f      	CPC  R0,R31
0005b9 9508      	RET
                 
                 __SAVELOCR6:
0005ba 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005bb 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005bc 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005bd 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005be 931a      	ST   -Y,R17
0005bf 930a      	ST   -Y,R16
0005c0 9508      	RET
                 
                 __LOADLOCR6:
0005c1 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005c2 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005c3 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005c4 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005c5 8119      	LDD  R17,Y+1
0005c6 8108      	LD   R16,Y
0005c7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  17 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   3 r6 :   4 r7 :   3 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:  18 
r16:  17 r17:  26 r18:  18 r19:  37 r20:  21 r21:  14 r22:   6 r23:   4 
r24:  15 r25:   7 r26: 146 r27:  60 r28:  15 r29:   1 r30: 300 r31: 103 
x  :  25 y  : 167 z  :  13 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   8 
adiw  :  22 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   7 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   4 break :   0 breq  :  23 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   4 brmi  :   0 brne  :  33 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 127 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   4 cln   :   0 
clr   :  10 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   6 cpi   :  49 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   1 ijmp  :   0 
in    :  28 inc   :   3 jmp   :  27 ld    :  37 ldd   :  55 ldi   : 177 
lds   :   0 lpm   :  12 lsl   :   0 lsr   :   0 mov   :  42 movw  :  15 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   3 out   :  66 pop   :  18 push  :  18 rcall :  23 ret   :  52 
reti  :   1 rjmp  :  84 rol   :   0 ror   :   0 sbc   :   0 sbci  :   7 
sbi   :  16 sbic  :   2 sbis  :  13 sbiw  :  21 sbr   :   0 sbrc  :   3 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  81 std   :  22 sts   :   2 sub   :   0 subi  :  16 swap  :   2 
tst   :   1 wdr   :   2 
Instructions used: 59 out of 116 (50.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b90   2748    212   2960   32768   9.0%
[.dseg] 0x000060 0x0001c6      0    102    102    2048   5.0%
[.eseg] 0x000000 0x000004      0      4      4    1024   0.4%

Assembly complete, 0 errors, 10 warnings
